<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Dnsmasq安装及配置]]></title>
    <url>%2F2019%2F10%2F07%2Fdnsmasq-install%2F</url>
    <content type="text"><![CDATA[一、Dnsmasq介绍1.1 简介 Dnsmasq是一个小巧且方便地用于配置DNS和DHCP的工具，作为域名解析服务器(DNS)，dnsmasq可以通过缓存 DNS 请求来提高对访问过的网址的连接速度。 1.2 原理 本机APP访问主机的/etc/resolv.conf获取DNSServer，该文件指向的DNSServer为Dnsmasq。 本地局域网中的主机可以直接访问Dnsmasq，即在这些主机中/etc/resolv.conf指向了Dnsmasq。 Dnsmasq需要通过上游DNS来进行域名解析，上游DNS可以配置在/etc/resolv.dnsmasq.conf中，该文件需要在Dnsmasq的配置文件/etc/dnsmasq.conf中指定。 1.3 主要功能 将Dnsmasq作为本地DNS服务器使用，直接修改电脑的本地DNS的IP地址即可。 应对ISP的DNS劫持（反DNS劫持），输入一个不存在的域名，正常的情况下浏览器是显示无法连接，DNS劫持会跳转到一个广告页面。先随便nslookup 一个不存在的域名，看看ISP商劫持的IP地址。 智能DNS加快解析速度，打开/etc/dnsmasq.conf文件，server=后面可以添加指定的DNS，例如国内外不同的网站使用不同的DNS。 国内指定DNS 123server=/cn/114.114.114.114server=/taobao.com/114.114.114.114server=/taobaocdn.com/114.114.114.114 国外指定DNS 1server=/google.com/223.5.5.5 屏蔽网页广告，将指广告的URL指定127这个IP，就可以将网页上讨厌的广告给去掉了。 12address=/ad.youku.com/127.0.0.1address=/ad.iqiyi.com/127.0.0.1 指定域名解析到特定的IP上。这个功能可以让你控制一些网站的访问，非法的DNS就经常把一些正规的网站解析到不正确IP上。 1address=/freehao123.com/123.123.123.123 管理控制内网DNS，首先将局域网中的所有的设备的本地DNS设置为已经安装Dnsmasq的服务器IP地址。然后修改已经安装Dnsmasq的服务器Hosts文件：/etc/hosts，指定域名到特定的IP中。 1例如想让局域网中的所有用户访问www.freehao123.com时跳转到192.168.0.2，添加：192.168.0.2 www.freehao123.com在Hosts文件中既可，整个过程也可以说是“DNS劫持” 二、开始安装2.1 安装服务1yum -y install dnsmasq 2.2 配置文件 dnsmasq配置文件 vim /etc/dnsmasq.conf dnsmasq有很多自定义的配置，此处我根据公司目前需求环境简化了很多，大家如果有兴趣的话，可以多去了解一下，或者直接参考本博客最后面额外补充的内容 12345678910111213141516171819# 指定上游DNS服务器resolv-file=/etc/resolv.dnsmasq.conf# 如果没有指定上游resolv.dnsmasq.conf配置文件的话，这里就可以开启 no-resolv#no-resolv #向所有上游服务器发送查询，而不是一个#all-servers# 记录dns查询日志，如果指定 log-queries=extra 那么在每行开始处都有额外的日志信息log-querieslog-facility=/var/log/dnsmasq/dnsmasq.log# 不加载本地的 /etc/hosts 文件no-hosts# 重新指定本地hosts文件，用来保存所有的解析记录addn-hosts=/etc/dnsmasq.hostscache-size=20000local-ttl=600dns-forward-max=20000 配置上游dns地址 vim /etc/resolv.dnsmasq.conf 1234# 前面两个为公司内网AD域的dns地址，当dnsmasq解析不到的记录会丢给下面3个去解析，前两个ip是内网AD域DNS地址，可根据自己环境配置nameserver 10.1.100.xxnameserver 10.1.100.xxnameserver 8.8.8.8 2.3 服务启动1234systemctl status dnsmasqsystemctl start dnsmasqsystemctl stop dnsmasqsystemctl restart dnsmasq 2.4 日志维护 内网解析量很多，每天产生大量日志，避免磁盘爆满影响服务，建议开启nscd缓存以及定时任务清理本地解析日志 2.41 安装nscd缓存12345678yum install nscd -yservice nscd start# 查看缓存统计信息nscd -g# 清除指定类型缓存nscd -i passwdnscd -i groupnscd -i hosts 2.42 定时清理日志任务12# 每周清理一次0 0 * * 0 &gt;/var/log/dnsmasq/dnsmasq.log 2.5 Dnsmasq服务测试 本地解析记录保存在 /etc/dnsmasq.hosts 文件中，平时可以自己按照格式往里面添加解析记录，然后局域网dns地址全部指向此台dnsmasq的ip地址即可 2.51 新增解析记录12# 新增一条测试记录，ip + 空格 + 主机名172.17.17.100 ansible-host 2.52 客户端配置 在局域网中找一台机器，修改本机resolv.conf中的dns解析地址为Dnsmasq地址，然后本机 ping ansible-host 看是否反馈的地址是 172.17.17.100 则服务配置成功 vim /etc/resolv.conf 1234# 这里search后面跟的内容会自动不全到解析记录里面（可选）search xx.xx.cn # 下面这个ip指向Dnsmasq服务器的ip地址nameserver xxx.xxx.xxx.xxx 三、额外补充配置介绍不加载本地的 /etc/hosts 文件#no-hosts# 添加读取额外的 hosts 文件路径，可以多次指定。如果指定为目录，则读取目录中的所有文件。#addn-hosts=/etc/dnsmasq.hosts.d# 读取目录中的所有文件，文件更新将自动读取#hostsdir=/etc/dnsmasq.hosts.d# 例如，/etc/hosts中的os01将扩展成os01.example.com#expand-hosts############################################################################### 缓存时间设置，一般不需要设置# 本地 hosts 文件的缓存时间，通常不要求缓存本地，这样更改hosts文件后就即时生效。#local-ttl=3600# 同 local-ttl 仅影响 DHCP 租约#dhcp-ttl=&lt;time&gt;# 对于上游返回的值没有ttl时，dnsmasq给一个默认的ttl，一般不需要设置，#neg-ttl=&lt;time&gt;# 指定返回给客户端的ttl时间，一般不需要设置#max-ttl=&lt;time&gt;# 设置在缓存中的条目的最大 TTL。#max-cache-ttl=&lt;time&gt;# 不需要设置，除非你知道你在做什么。#min-cache-ttl=&lt;time&gt;# 一般不需要设置#auth-ttl=&lt;time&gt;############################################################################### 记录dns查询日志，如果指定 log-queries=extra 那么在每行开始处都有额外的日志信息。#log-queries# 设置日志记录器，&apos;-&apos; 为 stderr，也可以是文件路径。默认为：DAEMON，调试时使用 LOCAL0。#log-facility=&lt;facility&gt;#log-facility=/var/log/dnsmasq/dnsmasq.log# 异步log，缓解阻塞，提高性能。默认为5，最大100。#log-async[=&lt;lines&gt;]#log-async=50############################################################################### 指定用户和组#user=nobody#group=nobody############################################################################### 指定DNS的端口，默认53，设置 port=0 将完全禁用 DNS 功能，仅使用 DHCP/TFTP#port=53# 指定 EDNS.0 UDP 包的最大尺寸，默认为 RFC5625 推荐的 edns-packet-max=4096#edns-packet-max=&lt;size&gt;# 指定向上游查询的 UDP 端口，默认是随机端口，指定后降低安全性、加快速度、减少资源消耗。# 设置为 &apos;0&apos; 由操作系统分配。#query-port=53535# 指定向上游查询的 UDP 端口范围，方便防火墙设置。#min-port=&lt;port&gt;#max-port=&lt;port&gt;# 指定接口，指定后同时附加 lo 接口，可以使用&apos;*&apos;通配符。# 不能使用接口别名（例如：&quot;eth1:0&quot;），请用 listen-address 选项替代。#interface=wlp2s0# 指定排除的接口，排除优先级高，可以使用&apos;*&apos;通配符#except-interface=# 仅接受同一子网的 DNS 请求。# 仅在未指定 interface、except-interface、listen-address 或者 auth-server 时有效。#local-service# 指定不提供 DHCP 或 TFTP 服务的接口，仅提供 DNS 服务。#no-dhcp-interface=enp3s0# 指定IP地址，可以多次指定。# interface 选项和 listen-address 选项可以同时使用。# 下面两行与指定 interface 选项的作用类似。listen-address=192.168.10.17#listen-address=127.0.0.1# 通常情况下即使设置了 interface 选项（例如：interface=wlp2s0 ）# 将仍然绑定到通配符地址（例如：*:53 ）。# 开启此项将仅监听指定的接口。# 适用于在同一主机的不同接口或 IP 地址上运行多个 dns 服务器。bind-interfaces# 对于新添加的接口不进行绑定。仅 Linux 系统支持，其他系统等同于 bind-interfaces 选项。#bind-dynamic############################################################################### 如果 hosts 中的主机有多个 IP 地址，仅返回对应子网的 IP 地址。localise-queries# 如果反向查找的是私有地址例如192.168.X.X，仅从 hosts 文件查找，不再转发到上游服务器#bogus-priv# 对于任何被解析到此 IP 的域名，将响应 NXDOMAIN 使其解析失效，可以多次指定# 通常用于对于访问不存在的域名，禁止其跳转到运营商的广告站点。#bogus-nxdomain=64.94.110.11# 忽略包含指定地址的 A 记录查询的回复。# 例如上游有台 dns 服务器伪造 www.baidu.com 的 IP 为 1.1.1.1 并且响应速度非常快。# 指定 ignore-address=1.1.1.1 可以忽略它的响应信息，# 从而等待 www.baidu.com 正确的查询结果。#ignore-address=&lt;ipaddr&gt;filterwin2k############################################################################### 指定 resolv-file 文件路径，默认/etc/resolv.conf#resolv-file=/etc/resolv.conf# 不读取 resolv-file 来确定上游服务器#no-resolv# 在编译时需要启用 DBus 支持。#enable-dbus[=&lt;service-name&gt;]# 严格按照resolv.conf中的顺序进行查找#strict-order# 向所有上游服务器发送查询，而不是一个。all-servers# 启用转发循环检测#dns-loop-detect############################################################################### 这项安全设置是拒绝解析包含私有 IP 地址的域名，# 这些IP地址包括如下私有地址范围：10.0.0.0/8、172.16.0.0/12、192.168.0.0/16。# 其初衷是要防止类似上游DNS服务器故意将某些域名解析成特定私有内网IP而劫持用户这样的安全***。# 直接在配置文件中注销 stop-dns-rebind 配置项从而禁用该功能。# 这个方法确实可以一劳永逸的解决解析内网 IP 地址的问题，# 但是我们也失去了这项安全保护的特性，所以在这里我不推荐这个办法。# 使用 rebind-domain-ok 进行特定配置，顾名思义该配置项可以有选择的忽略域名的 rebind 行为stop-dns-rebindrebind-localhost-ok#rebind-domain-ok=[&lt;domain&gt;]|[[/&lt;domain&gt;/[&lt;domain&gt;/]rebind-domain-ok=/.test.com/############################################################################### 也不要检测 /etc/resolv.conf 的变化#no-poll# 重启后清空缓存clear-on-reload# 完整的域名才向上游服务器查找，如果仅仅是主机名仅查找hosts文件domain-needed############################################################################### IP地址转换#alias=[&lt;old-ip&gt;]|[&lt;start-ip&gt;-&lt;end-ip&gt;],&lt;new-ip&gt;[,&lt;mask&gt;]###############################################################################local=[/[&lt;domain&gt;]/[domain/]][&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]#server=[/[&lt;domain&gt;]/[domain/]][&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]server=/test.com/192.168.10.117server=/10.168.192.in-addr.arpa/192.168.10.117#rev-server=&lt;ip-address&gt;/&lt;prefix-len&gt;,&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]# 将任何属于 &lt;domain&gt; 域名解析成指定的 &lt;ipaddr&gt; 地址。# 也就是将 &lt;domain&gt; 及其所有子域名解析成指定的 &lt;ipaddr&gt; IPv4 或者 IPv6 地址，通常用于屏蔽特定的域名。# 一次只能指定一个 IPv4 或者 IPv6 地址，要同时返回 IPv4 和IPv6 地址，请多次指定 address= 选项。# 注意： /etc/hosts 以及 DHCP 租约将覆盖此项设置。#address=/&lt;domain&gt;/[domain/][&lt;ipaddr&gt;]#ipset=/&lt;domain&gt;/[domain/]&lt;ipset&gt;[,&lt;ipset&gt;]#mx-host=&lt;mx name&gt;[[,&lt;hostname&gt;],&lt;preference&gt;]#mx-target=&lt;hostname&gt;# SRV 记录#srv-host=&lt;_service&gt;.&lt;_prot&gt;.[&lt;domain&gt;],[&lt;target&gt;[,&lt;port&gt;[,&lt;priority&gt;[,&lt;weight&gt;]]]]# A, AAAA 和 PTR 记录 #host-record=&lt;name&gt;[,&lt;name&gt;....],[&lt;IPv4-address&gt;],[&lt;IPv6-address&gt;][,&lt;TTL&gt;]# TXT 记录#txt-record=&lt;name&gt;[[,&lt;text&gt;],&lt;text&gt;]# PTR 记录 #ptr-record=&lt;name&gt;[,&lt;target&gt;]#naptr-record=&lt;name&gt;,&lt;order&gt;,&lt;preference&gt;,&lt;flags&gt;,&lt;service&gt;,&lt;regexp&gt;[,&lt;replacement&gt;]# CNAME 别名记录#cname=&lt;cname&gt;,&lt;target&gt;[,&lt;TTL&gt;]#dns-rr=&lt;name&gt;,&lt;RR-number&gt;,[&lt;hex data&gt;]#interface-name=&lt;name&gt;,&lt;interface&gt;[/4|/6]#synth-domain=&lt;domain&gt;,&lt;address range&gt;[,&lt;prefix&gt;]#add-mac[=base64|text]#add-cpe-id=&lt;string&gt;#add-subnet[[=[&lt;IPv4 address&gt;/]&lt;IPv4 prefix length&gt;][,[&lt;IPv6 address&gt;/]&lt;IPv6 prefix length&gt;]]############################################################################################################################################################# 缓存条数，默认为150条，cache-size=0 禁用缓存。cache-size=1000# 不缓存未知域名缓存，默认情况下dnsmasq缓存未知域名并直接返回为客户端。no-negcache# 指定DNS同属查询转发数量dns-forward-max=1000###############################################################################dnssec#trust-anchor=[&lt;class&gt;],&lt;domain&gt;,&lt;key-tag&gt;,&lt;algorithm&gt;,&lt;digest-type&gt;,&lt;digest&gt;#dnssec-check-unsigned#dnssec-no-timecheck#dnssec-timestamp=&lt;path&gt;#proxy-dnssec#dnssec-debug###############################################################################auth-server=&lt;domain&gt;,&lt;interface&gt;|&lt;ip-address&gt;#auth-zone=&lt;domain&gt;[,&lt;subnet&gt;[/&lt;prefix length&gt;][,&lt;subnet&gt;[/&lt;prefix length&gt;].....]]#auth-zone=&lt;domain&gt;[,&lt;interface name&gt;[/6|/4][,&lt;interface name&gt;[/6|/4].....]]#auth-soa=&lt;serial&gt;[,&lt;hostmaster&gt;[,&lt;refresh&gt;[,&lt;retry&gt;[,&lt;expiry&gt;]]]]#auth-sec-servers=&lt;domain&gt;[,&lt;domain&gt;[,&lt;domain&gt;...]]#auth-peer=&lt;ip-address&gt;[,&lt;ip-address&gt;[,&lt;ip-address&gt;...]]# 启用连接跟踪，读取 Linux 入栈 DNS 查询请求的连接跟踪标记，# 并且将上游返回的响应信息设置同样的标记。# 用于带宽控制和防火墙部署。# 此选项必须在编译时启用 conntrack 支持，并且内核正确配置并加载 conntrack。# 此选项不能与 query-port 同时使用。#conntrack################################################################################ DHCP 选项################################################################################ 设置 DHCP 地址池，同时启用 DHCP 功能。# IPv4 &lt;mode&gt; 可指定为 static|proxy ，当 &lt;mode&gt; 指定为 static 时，# 需用 dhcp-host 手动分配地址池中的 IP 地址。# 当 &lt;mode&gt; 指定为 proxy 时，为指定的地址池提供 DHCP 代理。#dhcp-range=[tag:&lt;tag&gt;[,tag:&lt;tag&gt;],][set:&lt;tag&gt;,]&lt;start-addr&gt;[,&lt;end-addr&gt;][,&lt;mode&gt;][,&lt;netmask&gt;[,&lt;broadcast&gt;]][,&lt;lease time&gt;]#dhcp-range=172.16.0.2,172.16.0.250,255.255.255.0,1h#dhcp-range=192.168.10.150,192.168.10.180,static,255.255.255.0,1h# 根据 MAC 地址或 id 固定分配客户端的 IP 地址、主机名、租期。# IPv4 下指定 id:* 将忽略 DHCP 客户端的 ID ，仅根据 MAC 来进行 IP 地址分配。# 在读取 /etc/hosts 的情况，也可以根据 /etc/hosts 中的主机名分配对应 IP 地址。# 指定 ignore 将忽略指定客户端得 DHCP 请求。#dhcp-host=[&lt;hwaddr&gt;][,id:&lt;client_id&gt;|*][,set:&lt;tag&gt;][,&lt;ipaddr&gt;][,&lt;hostname&gt;][,&lt;lease_time&gt;][,ignore]#dhcp-hostsfile=&lt;path&gt;#dhcp-hostsdir=&lt;path&gt;# 读取 /etc/ethers 文件 与使用 dhcp-host 的作用相同。IPv6 无效。#read-ethers# 指定给 DHCP 客户端的选项信息，# 默认情况下 dnsmasq 将发送：子网掩码、广播地址、DNS 服务器地址、网关地址、域等信息。# 指定此选项也可覆盖这些默认值并且设置其他选项值。# 重要：可以使用 option:&lt;option-name&gt;或者 option号 来指定。# &lt;option-name&gt; 和 option号的对应关系可使用命令：# dnsmasq --help dhcp 以及 dnsmasq --help dhcp6 查看，这点很重要。# 例如设置网关参数，既可以使用 dhcp-option=3,192.168.4.4 也可以使用 dhcp-option = option:router,192.168.4.4。# 0.0.0.0 意味着当前运行 dnsmasq 的主机地址。# 如果指定了多个 tag:&lt;tag&gt; 必须同时匹配才行。# [encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],] 有待继续研究。#dhcp-option=[tag:&lt;tag&gt;,[tag:&lt;tag&gt;,]][encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],][&lt;opt&gt;|option:&lt;opt-name&gt;|option6:&lt;opt&gt;|option6:&lt;opt-name&gt;],[&lt;value&gt;[,&lt;value&gt;]]#dhcp-option-force=[tag:&lt;tag&gt;,[tag:&lt;tag&gt;,]][encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],]&lt;opt&gt;,[&lt;value&gt;[,&lt;value&gt;]]#dhcp-optsfile=&lt;path&gt;#dhcp-optsdir=&lt;path&gt;#dhcp-option=3,1.2.3.4#dhcp-option=option:router,1.2.3.4#dhcp-option=option:router,192.168.10.254#dhcp-option=option:dns-server,192.168.10.254,221.12.1.227,221.12.33.227############################################################################### (IPv4 only) 禁用重用服务器名称和文件字段作为额外的 dhcp-option 选项。# 一般情况下 dnsmasq 从 dhcp-boot 移出启动服务器和文件信息到 dhcp-option 选项中。# 这使得在 dhcp-option 选项封包中有额外的选项空间可用，但是会使老的客户端混淆。# 此选项将强制使用简单并安全的方式来避免此类情况。可以认为是一个兼容性选项。#dhcp-no-override############################################################################### 配置 DHCP 中继。# &lt;local address&gt; 是运行 dnsmasq 的接口的 IP 地址。# 所有在 &lt;local address&gt; 接口上接收到的 DHCP 请求将中继到 &lt;server address&gt; 指定的远程 DHCP 服务器。# 可以多次配置此选项，使用同一个 &lt;local address&gt; 转发到多个不同的 &lt;server address&gt; 指定的远程 DHCP 服务器。# &lt;server address&gt; 仅允许使用 IP 地址，不能使用域名等其他格式。# 如果是 DHCPv6，&lt;server address&gt; 可以是 ALL_SERVERS 的多播地址 ff05::1:3 。# 在这种情况下必须指定接口 &lt;interface&gt; ，不能使用通配符，用于直接多播到对应的 DHCP 服务器所在的接口。# &lt;interface&gt; 指定了仅允许接收从 &lt;interface&gt; 接口的 DHCP 服务器相应信息。#dhcp-relay=&lt;local address&gt;,&lt;server address&gt;[,&lt;interface&gt;]############################################################################### 设置标签#dhcp-vendorclass=set:&lt;tag&gt;,[enterprise:&lt;IANA-enterprise number&gt;,]&lt;vendor-class&gt;#dhcp-userclass=set:&lt;tag&gt;,&lt;user-class&gt;#dhcp-mac=set:&lt;tag&gt;,&lt;MAC address&gt;#dhcp-circuitid=set:&lt;tag&gt;,&lt;circuit-id&gt;#dhcp-remoteid=set:&lt;tag&gt;,&lt;remote-id&gt;#dhcp-subscrid=set:&lt;tag&gt;,&lt;subscriber-id&gt;#dhcp-match=set:&lt;tag&gt;,&lt;option number&gt;|option:&lt;option name&gt;|vi-encap:&lt;enterprise&gt;[,&lt;value&gt;]#tag-if=set:&lt;tag&gt;[,set:&lt;tag&gt;[,tag:&lt;tag&gt;[,tag:&lt;tag&gt;]]]#dhcp-proxy[=&lt;ip addr&gt;]......############################################################################### 不分配匹配这些 tag:&lt;tag&gt; 的 DHCP 请求。#dhcp-ignore=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]#dhcp-ignore-names[=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]]#dhcp-generate-names=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]# IPv4 only 使用广播与匹配 tag:&lt;tag&gt; 的客户端通信。一般用于兼容老的 BOOT 客户端。#dhcp-broadcast[=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]] ############################################################################### IPv4 only 设置 DHCP 服务器返回的 BOOTP 选项，# &lt;servername&gt; &lt;server address&gt; 可选，# 如果未设置服务器名称将设为空，服务器地址设为 dnsmasq 的 IP 地址。# 如果指定了多个 tag:&lt;tag&gt; 必须同时匹配才行。# 如果指定 &lt;tftp_servername&gt; 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。 #dhcp-boot=[tag:&lt;tag&gt;,]&lt;filename&gt;,[&lt;servername&gt;[,&lt;server address&gt;|&lt;tftp_servername&gt;]]# 根据不同的类型使用不同的选项。# 使用示例：# dhcp-match=set:EFI_x86-64,option:client-arch,9# dhcp-boot=tag:EFI_x86-64,uefi/grubx64.efi# #dhcp-match=set:EFI_Xscale,option:client-arch,8# #dhcp-boot=tag:EFI_Xscale,uefi/grubx64.efi# #dhcp-match=set:EFI_BC,option:client-arch,7# #dhcp-boot=tag:EFI_BC,uefi/grubx64.efi# #dhcp-match=set:EFI_IA32,option:client-arch,6# #dhcp-boot=tag:EFI_IA32,uefi/grubx64.efi# #dhcp-match=set:Intel_Lean_Client,option:client-arch,5# #dhcp-boot=tag:Intel_Lean_Client,uefi/grubx64.efi# #dhcp-match=set:Arc_x86,option:client-arch,4# #dhcp-boot=tag:Arc_x86,uefi/grubx64.efi# #dhcp-match=set:DEC_Alpha,option:client-arch,3# #dhcp-boot=tag:DEC_Alpha,uefi/grubx64.efi# #dhcp-match=set:EFI_Itanium,option:client-arch,2# #dhcp-boot=tag:EFI_Itanium,uefi/grubx64.efi# #dhcp-match=set:NEC/PC98,option:client-arch,1# #dhcp-boot=tag:NEC/PC98,uefi/grubx64.efi# dhcp-match=set:Intel_x86PC,option:client-arch,0# dhcp-boot=tag:Intel_x86PC,pxelinux.0############################################################################### DHCP 使用客户端的 MAC 地址的哈希值为客户端分配 IP 地址，# 通常情况下即使客户端使自己的租约到期，客户端的 IP 地址仍将长期保持稳定。# 在默认模式下，IP 地址是随机分配的。# 启用 dhcp-sequential-ip 选项将按顺序分配 IP 地址。# 在顺序分配模式下，客户端使租约到期更像是仅仅移动一下 IP 地址。# 在通常情况下不建议使用这种方式。#dhcp-sequential-ip############################################################################### 多数情况下我们使用 PXE，只是简单的允许 PXE 客户端获取 IP 地址，# 然后 PXE 客户端下载 dhcp-boot 选项指定的文件并执行，也就是 BOOTP 的方式。# 然而在有适当配置的 DHCP 服务器支持的情况下，PXE 系统能够实现更复杂的功能。# pxe-service 选项可指定 PXE 环境的启动菜单。# 为不同的类型系统设定不同的启动菜单，并且覆盖 dhcp-boot 选项。# &lt;CSA&gt; 为客户端系统类型：x86PC, PC98, IA64_EFI, Alpha, Arc_x86, Intel_Lean_Client, # IA32_EFI, X86-64_EFI, Xscale_EFI, BC_EFI, ARM32_EFI 和 ARM64_EFI，其他类型可能为一个整数。# &lt;basename&gt; 引导 PXE 客户端使用 tftp 从 &lt;server address&gt; 或者 &lt;server_name&gt; 下载文件。# 注意：&quot;layer&quot; 后缀 (通常是 &quot;.0&quot;) 由 PXE 提供，也就是 PXE 客户端默认在文件名附加 .0 后缀。# 示例：pxe-service=x86PC, &quot;Install Linux&quot;, pxelinux （读取 pxelinux.0 文件并执行）# pxe-service=x86PC, &quot;Install Linux&quot;, pxelinux, 1.2.3.4（不适用于老的PXE）# &lt;bootservicetype&gt; 整数，PXE 客户端将通过广播或者通过 &lt;server address&gt; # 或者 &lt;server_name&gt; 搜索对应类型的适合的启动服务。。# 示例：pxe-service=x86PC, &quot;Install windows from RIS server&quot;, 1# pxe-service=x86PC, &quot;Install windows from RIS server&quot;, 1, 1.2.3.4# 未指定 &lt;basename&gt;、&lt;bootservicetype&gt; 或者 &lt;bootservicetype&gt; 为 “0”，将从本地启动。# 示例：pxe-service=x86PC, &quot;Boot from local disk&quot;# pxe-service=x86PC, &quot;Boot from local disk&quot;, 0# 如果指定 &lt;server_name&gt; 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。 # pxe-service=[tag:&lt;tag&gt;,]&lt;CSA&gt;,&lt;menu text&gt;[,&lt;basename&gt;|&lt;bootservicetype&gt;][,&lt;server address&gt;|&lt;server_name&gt;]# 在 PXE 启动后弹出提示，&lt;prompt&gt; 为提示内容，&lt;timeout&gt; 为超时时间，为 0 则立即执行。# 如果未指定此选项，在有多个启动选项的情况下等待用户选择，不会超时。# pxe-prompt=[tag:&lt;tag&gt;,]&lt;prompt&gt;[,&lt;timeout&gt;]# 根据不同的类型使用不同的菜单，使用示例：# #pxe-prompt=&quot;What system shall I netboot?&quot;, 120# # or with timeout before first available action is taken:# pxe-prompt=&quot;Press F8 or Enter key for menu.&quot;, 60# pxe-service=x86PC, &quot;Now in x86PC (BIOS mode), boot from local&quot;, 0# pxe-service=x86PC, &quot;Now in x86PC (BIOS mode)&quot;, pxelinux# pxe-service=PC98, &quot;Now in PC98 mode&quot;, PC98# pxe-service=IA64_EFI, &quot;Now in IA64_EFI mode&quot;, IA64_EFI# pxe-service=Alpha, &quot;Now in Alpha mode&quot;, Alpha# pxe-service=Arc_x86, &quot;Now in Arc_x86 mode&quot;, Arc_x86# pxe-service=Intel_Lean_Client, &quot;Now in Intel_Lean_Client mode&quot;, Intel_Lean_Client# pxe-service=IA32_EFI, &quot;Now in IA32_EFI mode&quot;, IA32_EFI# pxe-service=X86-64_EFI, &quot;Now in X86-64_EFI (UEFI mode), boot from local&quot;, 0# pxe-service=X86-64_EFI, &quot;Now in X86-64_EFI (UEFI mode)&quot;, grub/grub-x86_64.efi# pxe-service=Xscale_EFI, &quot;Now in Xscale_EFI mode&quot;, Xscale_EFI# pxe-service=BC_EFI, &quot;Now in BC_EFI mode&quot;, BC_EFI# # CentOS7 系统不支持下列两个选项# #pxe-service=ARM32_EFI,&quot;Now in ARM32_EFI mode&quot;,ARM32_EFI# #pxe-service=ARM64_EFI,&quot;Now in ARM64_EFI mode&quot;,ARM64_EFI############################################################################### 默认为150，即最多分配150个ip地址出去，最大1000个ip# dhcp-lease-max=150# (IPv4 only) 指定DHCP端口，默认为67和68。如果不指定则为1067和1068，单指定一个，第二个加1# dhcp-alternate-port[=&lt;server port&gt;[,&lt;client port&gt;]]# 谨慎使用此选项，避免 IP 地址浪费。(IPv4 only) 允许动态分配 IP 地址给 BOOTP 客户端。# 注意：BOOTP 客户端获取的 IP 地址是永久的，将无法再次分配给其他客户端。# bootp-dynamic[=&lt;network-id&gt;[,&lt;network-id&gt;]]# 谨慎使用此选项。# 默认情况下 DHCP 服务器使用 ping 的方式进行确保 IP 未被使用的情况下将 IP 地址分配出去。# 启用此选项将不使用 ping 进行确认。# no-ping############################################################################### 记录额外的 dhcp 日志，记录所有发送给 DHCP 客户端的选项（option）以及标签（tag）信息# log-dhcp# 禁止记录日常操作日志，错误日志仍然记录。启用 log-dhcp 将覆盖下列选项。# quiet-dhcp# quiet-dhcp6# quiet-ra# 修改 DHCP 默认租约文件路径，默认情况下无需修改# dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases# (IPv6 only)# dhcp-duid=&lt;enterprise-id&gt;,&lt;uid&gt;############################################################################### dhcp-script=&lt;path&gt;# dhcp-luascript=&lt;path&gt;# dhcp-scriptuser=root# script-arp# leasefile-ro# bridge-interface=&lt;interface&gt;,&lt;alias&gt;[,&lt;alias&gt;]############################################################################### 给 DHCP 服务器指定 domain 域名信息，也可以给对应的 IP 地址池指定域名。# 直接指定域名# 示例：domain=thekelleys.org.uk# 子网对应的域名# 示例：domain=wireless.thekelleys.org.uk,192.168.2.0/24# ip范围对应的域名# 示例：domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200# domain=&lt;domain&gt;[,&lt;address range&gt;[,local]]# 在默认情况下 dnsmasq 插入普通的客户端主机名到 DNS 中。# 在这种情况下主机名必须唯一，即使两个客户端具有不同的域名后缀。# 如果第二个客户端使用了相同的主机名，DNS 查询将自动更新为第二个客户端的 IP 地址。# 如果设置了 dhcp-fqdn 选项，普通的主机名将不再插入到 DNS 中去，# 仅允许合格的具有域名后缀的主机名插入到 DNS 服务器中。# 指定此选项需同时指定不含 &lt;address range&gt; 地址范围的 domain 选项。#dhcp-fqdn# 通常情况下分配 DHCP 租约后，dnsmasq 设置 FQDN 选项告诉客户端不要尝试 DDNS 更新主机名与 IP 地址。# 这是因为 name-IP 已自动添加到 dnsmasq 的 DNS 视图中的。# 设置此选项将允许客户端 DDNS 更新，# 在 windows 下允许客户端更新 windows AD 服务器是非常有用的。# 参看 RFC 4702# dhcp-client-update# enable-ra# ra-param=&lt;interface&gt;,[high|low],[[&lt;ra-interval&gt;],&lt;router lifetime&gt;]################################################################################ TFTP 选项################################################################################ 对于绝大多数的配置，仅需指定 enable-tftp 和 tftp-root 选项即可。# 是否启用内置的 tftp 服务器，可以指定多个逗号分隔的网络接口# enable-tftp[=&lt;interface&gt;[,&lt;interface&gt;]]# enable-tftp# enable-tftp=enp3s0,lo# 指定 tftp 的根目录，也就是寻找传输文件时使用的相对路径，可以附加接口，# tftp-root=&lt;directory&gt;[,&lt;interface&gt;]# tftp-root=/var/lib/tftpboot/# 如果取消注释，那么即使指定的 tftp-root 无法访问，仍然启动 tftp 服务。# tftp-no-fail# 附加客户端的 IP 地址作为文件路径。此选项仅在正确设置了 tftp-root 的情况下可用，# 示例：如果 tftp-root=/tftp，客户端为 192.168.1.15 请求 myfile.txt 文件时，# 将优先请求 /tftp/192.168.1.15/myfile.txt 文件， 其次是 /tftp/myfile.txt 文件。# 感觉没什么用。# tftp-unique-root# 启用安全模式，启用此选项，仅允许 tftp 进程访问属主为自己的文件。# 不启用此选项，允许访问所有 tftp 进程属主可读取的文件。# 如果 dnsmasq 是以 root 用户运行，tftp-secure 选项将允许访问全局可读的文件。# 一般情况下不推荐以 root 用户运行 dnsmasq。# 在指定了 tftp-root 的情况下并不是很重要。# tftp-secure# 将所有文件请求转换为小写。对于 Windows 客户端来说非常有用，建议开启此项。# 注意：dnsmasq 的 TFTP 服务器总是将文件路径中的“\”转换为“/”。# tftp-lowercase# 允许最大的连接数，默认为 50# 如果将连接数设置的很大，需注意每个进程的最大文件描述符限制，详见文档手册。# tftp-max=&lt;connections&gt;# tftp-max=50# 设置传输时的 MTU 值，建议不设置或按需设置。# 如果设定的值大于网络接口的 MTU 值，将按照网络接口的 MTU 值自动分片传输（不推荐）。# tftp-mtu=&lt;mtu size&gt;# 停止 tftp 服务器与客户端协商 &quot;blocksize&quot; 选项。启用后，防止一些古怪的客户端出问题。# tftp-no-blocksize# 指定 tftp 的连接端口的范围，方便防火墙部署。# tftp 侦听在 69/udp ，连接端口默认是由系统自动分配的，# 非 root 用户运行时指定的连接端口号需大于 1025 最大 65535。# tftp-port-range=&lt;start&gt;,&lt;end&gt;################################################################################ conf-dir=&lt;directory&gt;[,&lt;file-extension&gt;......]# conf-file=/etc/dnsmasq.more.confconf-dir=/etc/dnsmasq.d# servers-file=&lt;file&gt;]]></content>
      <categories>
        <category>linux 运维</category>
      </categories>
      <tags>
        <tag>linux 运维</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python脚本抓取腾讯云上主机名称及对应IP]]></title>
    <url>%2F2019%2F10%2F05%2Fscript-gethostip%2F</url>
    <content type="text"><![CDATA[一、背景 现在要求通过api接口，把腾讯云上所有的主机实例名称和对应内网ip地址抓取下来保存到dnsmasq文件中，供内部解析使用 公司内部有自己搭建的DNSMasq集群，用来解析主机名及对应IP。因为几千台机器，管理时大家都是通过主机名来区别什么服务,前提是每台主机命名要符合规范 二、脚本2.1 python脚本 Vim /root/python/GetDNS.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#! /usr/bin/env python3# -*- coding: utf-8 -*-import osfrom tencentcloud.common import credentialfrom tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKExceptionfrom tencentcloud.cvm.v20170312 import cvm_client, models#HOST_FILE=&quot;/etc/dnsmasq.hosts&quot;#if os.path.exists(HOST_FILE):# pass#else:# print(&quot;没有发现DNS FILE，将会创建！&quot;)# os.system(&quot;touch /etc/dnsmasq.hosts&quot;)def get_exist(): exist_ip = [] if not os.path.exists(&apos;/etc/dnsmasq.hosts&apos;): return exist_ip with open(&apos;/etc/dnsmasq.hosts&apos;, &apos;r&apos;) as f: for data in f.readlines(): exist_ip.append(data.strip().split(&apos; &apos;)[0]) return exist_ip def add_data(): secretId = &apos;AxxxxxxxxxxxxxxxxA&apos; secretKey = &apos;keyxxxxxxxxxxxxxxxxxxxxKEY&apos; //此处填写腾讯云账户里面的ID及对应的KEY cred = credential.Credential(secretId=secretId, secretKey=secretKey) client = cvm_client.CvmClient(cred, &quot;ap-shanghai&quot;) req = models.DescribeInstancesRequest() resp = client.DescribeInstances(req) exist_ip = get_exist() for i in range(int(resp.TotalCount / 20) + 1): req.Offset = i * 20 resp = client.DescribeInstances(req) for j in resp.InstanceSet: if j.PrivateIpAddresses[0] in exist_ip: continue line = &apos;&#123;&#125; &#123;&#125;.ad.tuhu.cn&apos;.format(j.PrivateIpAddresses[0], j.InstanceName) #line = &apos;&#123;&#125; &#123;&#125;&apos;.format(j.PrivateIpAddresses[0], j.InstanceName) with open(&apos;/etc/dnsmasq.hosts&apos;, &apos;a+&apos;) as f: f.write(line + &apos;\n&apos;)if __name__ == &apos;__main__&apos;: add_data() 2.2 定时任务1*/1 * * * * echo `date`&gt;&gt;/var/log/dnsmasq/getlist.log &amp;&amp; python /root/python/GetDNS.py &gt;&gt;/var/log/dnsmasq/getlist.log]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>linux 运维</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tengine日常操作攻略]]></title>
    <url>%2F2019%2F09%2F28%2Ftenine-operation%2F</url>
    <content type="text"><![CDATA[一、常用操作1.1 重定向 302 临时重定向 123location /query &#123; rewrite ^(.*)$ https://docs.qq.com/doc/DVEtQbVdOcUpTZWl2 redirect; &#125; 301 永久重定向 123location /ceshi &#123; rewrite ^(.*)$ https://$host$1 permanent; &#125; 1.2 配置返回403123location /abcd &#123; return 403; &#125; if嵌套语句返回403 1234567set $flag 0;if ($args ~* &quot;occupyStock&quot;) &#123; set $flag &quot;$&#123;flag&#125;1&quot;; &#125;if ($flag = &quot;01&quot;) &#123; return 403; &#125; 1.3 拒绝全部访问123location /configs/ &#123; deny all; &#125; 1.4 拒绝某一个IP1234location / &#123; deny 125.119.249.65; allow all; &#125; 1.5 代理1234567location /thirdparty &#123; proxy_redirect off; proxy_set_header Host www.512book.cn; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://www.512book.cn/thirtparty; &#125; 1.6 Upstream健康检查模块 tcp协议，适用于后端是linux主机 12345678 upstream www_512book_cn &#123; keepalive 32; keepalive_timeout 30s; check interval=1000 rise=2 fall=3 timeout=1000 type=tcp; check_keepalive_requests 10000; server 10.10.12.19:8797; server 10.10.12.37:8797;&#125; http协议，适用于后端是winserver web站点服务 12345678910upstream www_512book_cn &#123; least_conn; keepalive 32; keepalive_timeout 30s; check interval=3000 rise=2 fall=3 timeout=1000 type=http default_down=false; check_http_send &quot;GET /_stats/build.txt HTTP/1.1\r\nHost: localhost\r\nConnection: keep-alive\r\n\r\n&quot;; check_keepalive_requests 10000; server 10.10.12.19:8797; server 10.10.12.37:8797;&#125; 1.7 Server配置文件一份]]></content>
      <categories>
        <category>负载均衡</category>
      </categories>
      <tags>
        <tag>tengine</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cisco asa防火墙与深信服设备打通IPsec-VPN]]></title>
    <url>%2F2019%2F09%2F28%2Fcisco-asa-sangfor%2F</url>
    <content type="text"><![CDATA[一、前言 为了实现北京分部能够和苏州总部内部局域网互通，先通过两边的设备打通IPSEC 点到点VPN隧道 设备：Cisco asa 5545（总部）、深信服SG设备（北京） 二、配置Cisco asa防火墙2.1 建立地址对象 苏州总部的三个网段109、110、111 北京的网段30网段 12345678object network sz-109 subnet 192.168.109.0 255.255.255.0object network sz-110 subnet 192.168.110.0 255.255.255.0object network sz-172 subnet 172.16.5.0 255.255.255.0object network beijinglan subnet 192.168.1.0 255.255.255.0 --北京分部网段 建立一个组SZ-VPN-BJ，把上面的苏州总部三个网段添加进去，NAT转换的时候可以直接调用此组对象 1234object-group network SZ-VPN-BJ network-object object sz-109 network-object object sz-110 network-object object sz-172 2.2 创建Access-list访问列表 允许苏州网段访问北京网段 1access-list outside_cryptomap extended permit ip object-group SZ-VPN-BJ object beijinglan 2.3 Nat转换1nat (inside,outside) source static SZ-VPN-BJ SZ-VPN-BJ destination static beijinglan beijinglan no-proxy-arp route-lookup 2.4 配置第一阶段ikev1 Cisco asa 8.4（2）版本及以上的ASA支持2个版本的IKE，在此处我们选择IKEV1 创建一个策略名为120,定义两边共同的协商算法 123456crypto ikev1 policy 10 ------------- authentication pre-share encryption 3des hash sha group 2 lifetime 28800 配置一个静态VPN对等项和预共用的键的一个隧道组 123tunnel-group 118.186.xx.xx type ipsec-l2l --118.186为北京分部IPtunnel-group 118.186.xx.xx ipsec-attributes ikev1 pre-shared-key woshibook --配置一个公钥 创建crypto map 1234567crypto ipsec ikev1 transform-set office esp-3des esp-md5-hmac crypto map outside_map 10 match address outside_cryptomap ------调用访问列表crypto map outside_map 10 set pfs crypto map outside_map 10 set peer 118.186.xx.xx ------对端北京地址crypto map outside_map 10 set ikev1 transform-set officecrypto map outside_map interface outside --------------在outside接口启用ipsecvpncrypto ikev1 enable outside 三、分部深信服SG配置3.1 VPN配置 -菜单中找到VPN配置 点击第一阶段新增 -填写对端固定ip及共享秘钥（跟总部asa对端保持一致） 菜单中点击第二阶段，配置入站和出站策略： 先配置一个苏州总部的172网段的入站策略 再配置一个出站策略 ，北京网段去往苏州总部的流量策略 在安全选项中点击新增，参数要和对端保持一致 到此配置结束。。。有问题请留言讨论]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>思科防火墙</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Keepalived+Haproxy高可用怎么玩]]></title>
    <url>%2F2019%2F09%2F21%2Fhaproxy%2F</url>
    <content type="text"><![CDATA[一、前言1.1 Haproxy功能特性 HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。 HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。 Haproxy四层负载。将网络流量负载平衡到多个服务器的最简单方法是使用第4层（传输层）负载平衡。以这种方式进行负载均衡将根据IP范围和端口转发用户流量。(常用作四层，这里就着重介绍四层负载均衡) 1.2 准备工具 keepalived（yum安装） haproxy-1.9.8-0.el7.x86_64.rpm(官网下载rpm包) 两台Centos7服务器:192.168.10.1、192.168.10.2(两台主从高可用) VIP虚拟IP: 172.16.20.20(keepalived高可用漂移) 二、Haproxy安装配置2.1 安装依赖 SSH登陆第一台服务器192.168.10.1 新增www用户，用于启动haproxy服务 123ssh 192.168.10.1yum install gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel lua-devel GeoIP GeoIP-devel GeoIP-data systemd-devel -yuseradd www -s /sbin/nologin 2.2 安装haproxy 拷贝haproxy-1.9.8-0.el7.x86_64.rpm到/root/目录下 1rpm -ivh haproxy-1.9.8-0.el7.x86_64.rpm 2.3 配置haproxy.cfg 进入主目录/etc/haproxy/ vim haproxy.cfg 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657global log 127.0.0.1 local0 log 127.0.0.1 local1 notice //开启日志用的 user www group www maxconn 100000defaults mode tcp retries 3 option tcplog option redispatch option abortonclose #option dontlognull option log-health-checks //开启后端server健康检查日志输出 option httpclose balance roundrobin //后端server流量轮询 maxconn 100000 timeout connect 3000 timeout client 3600000 timeout server 3600000listen status //开启haproxy后台管理页面 bind :1080 mode http log global stats enable stats refresh 30s stats uri /admin stats realm HAProxy\ Stats stats hide-version stats auth root:123456 //配置账户密码 stats admin if TRUE#####################配置两组四层服务案例#####################frontend MySQL //定义这个服务的名字为MySQL bind 172.16.20.20:3306 //监听VIP的3306端口 log global acl ACL_DB-MYSQL-1 dst 172.16.20.20 use_backend DB-MYSQL-1 if ACL_DB-MYSQL-1 frontend redis //定义这个服务的名字为redis bind 172.16.20.20:10333 //监听的VIP的10333端口 log global default_backend redisbackend DB-MYSQL-1 log 127.0.0.1 local0 notice //这行必须加上，否则日志不输出健康检查状态 server 192.168.100.20 192.168.100.21:3306 check inter 1000 rise 3 fall 3 server 192.168.100.21 192.168.100.21:3306 check inter 1000 rise 3 fall 3 backup //状态为备机，只要上面一个服务器挂了，健康检查3秒之后下线，然后备机就顶上了backend redis log 127.0.0.1 local0 notice server 192.168.100.22 192.168.100.22:6379 check inter 1000 rise 3 fall 3 2.4 启动服务12345#验证配置有没有语法错误/etc/haproxy/sbin/haproxy -c -f /etc/haproxy/haproxy.cfgConfiguration file is valid //出现这个表示配置文件没问题systemctl start haproxy //启动systemctl reload haproxy //重新载入配置 三、Keepalived安装配置3.1 yum安装1yum install keepalived -y 3.2 keepalived配置文件 keepalived 采用的是非抢占模式（建议） vim /etc/keepalived/keepalived.conf 123456789101112131415161718192021222324252627282930313233343536373839! Configuration File for keepalivedglobal_defs &#123;&#125;#这是第一个脚本，检测haproxy进程是否存在，不存在则结束keepalived,VIP漂移到备用从服务器，实现高可用vrrp_script check_haproxy &#123; script &quot;/etc/keepalived/check_haproxy.sh&quot; //脚本存放路径 &#125;vrrp_instance VI_1 &#123; state BACKUP //都定义backup为非抢占模式 nopreempt interface eth0 virtual_router_id 100 priority 100 //主机器权重为100，从机器要比这小，可以配置90 advert_int 1 unicast_src_ip 192.168.10.1 //本机主IP unicast_peer &#123; 192.168.10.2 //对端从IP,在从机器上，这两个主从IP是反过来的 &#125; authentication &#123; auth_type PASS auth_pass haproxy //这里可以自定义一个字符串，但两边要保证一致 &#125; virtual_ipaddress &#123; 172.16.20.20/16 //虚拟IP配置在这里 &#125; #以下是另外一个脚本，在日志里面打印出keepalived服务状态， notify_master &quot;/etc/keepalived/notify_action.sh MASTER&quot; notify_backup &quot;/etc/keepalived/notify_action.sh BACKUP&quot; notify_fault &quot;/etc/keepalived/notify_action.sh FAULT&quot; notify_stop &quot;/etc/keepalived/notify_action.sh STOP&quot; garp_master_delay 1 garp_master_refresh 5 track_script &#123; check_haproxy //调用上面定义的脚本 &#125;&#125; 3.3 自定义脚本3.3.1 haproxy状态检测脚本 此脚本的目的是检测haproxy状态，当haproxy主程序挂掉之后，自动杀掉keepalived程序，把vip漂移到备用从服务器，从而实现高可用 vim /etc/keepalived/check_haproxy.sh 123456#!/bin/bash#检测nginx进程不存在了，尝试启动，发现启动不了则切换到备用机器A=`ps -C haproxy --no-header |wc -l`if [ `ps -C haproxy --no-header |wc -l` -eq 0 ];then systemctl stop keepalivedfi 3.3.2 Keepalived日志输出状态 这个脚本可选，属于我自己自定义的，没有需要可以跳过，并去掉keepalived配置文件里的引用此脚本部分 此脚本目的就是当keepalived状态发生改变，比如服务停止、启动把定义的状态输出到日志上，以便后续排错 vim /etc/keepalived/notify_action.sh 1234567891011121314151617181920212223242526272829303132333435#!/bin/bash#/etc/keepalived/notify_action.shlog_file=/var/log/keepalived.loglog_write()&#123; echo &quot;[`date &apos;+%Y-%m-%d %T&apos;`] $1&quot; &gt;&gt; $log_file&#125;[ ! -d /var/keepalived/ ] &amp;&amp; mkdir -p /var/keepalived/case &quot;$1&quot; in &quot;MASTER&quot; ) echo -n &quot;$1&quot; &gt; /var/keepalived/state log_write &quot; notify_master&quot; echo -n &quot;0&quot; &gt; /var/keepalived/vip_check_failed_count ;; &quot;BACKUP&quot; ) echo -n &quot;$1&quot; &gt; /var/keepalived/state log_write &quot; notify_backup&quot; ;; &quot;FAULT&quot; ) echo -n &quot;$1&quot; &gt; /var/keepalived/state log_write &quot; notify_fault&quot; ;; &quot;STOP&quot; ) echo -n &quot;$1&quot; &gt; /var/keepalived/state log_write &quot; notify_stop&quot; ;; *) log_write &quot;notify_action.sh: STATE ERROR!!!&quot; ;;esac 3.3.3 脚本添加权限1chmod +x check_haproxy.sh notify_action.sh 3.4 启动keepalived服务 启动服务后，可以通过ip a查看本机ip是否多了一个虚拟ip：172.16.20.20 绑定在上面，这样就算成功了 12systemctl start keepalived //启动systemctl reload keepalived //变更配置后，一般用这个命令重新加载 3.4 备用从服务器操作注意事项 把上面haproxy安装配置和keepalived安装配置照着完全做一份，操作步骤一样，可以安装好把主服务器上配置文件拷贝过去 唯一的区别就是从服务器的keepalived配置文件有稍微区别需要注意,我直接附上配置 vim /etc/keepalived/keepalived.conf 123456789101112131415161718192021222324252627282930313233343536373839! Configuration File for keepalivedglobal_defs &#123;&#125;#这是第一个脚本，检测haproxy进程是否存在，不存在则结束keepalived,VIP漂移到备用从服务器，实现高可用vrrp_script check_haproxy &#123; script &quot;/etc/keepalived/check_haproxy.sh&quot; //脚本存放路径 &#125;vrrp_instance VI_1 &#123; state BACKUP //都定义backup为非抢占模式 nopreempt interface eth0 virtual_router_id 100 //此ID号保持一致，同一个局域网最好不要有重复的 priority 90 //主机器权重为100，这里设置90，一定要比主的小 advert_int 1 unicast_src_ip 192.168.10.2 //本机主IP unicast_peer &#123; 192.168.10.1 //对端从IP &#125; authentication &#123; auth_type PASS auth_pass haproxy //这里可以自定义一个字符串，但两边要保证一致 &#125; virtual_ipaddress &#123; 172.16.20.20/16 //虚拟IP配置在这里 &#125; #以下是另外一个脚本，在日志里面打印出keepalived服务状态， notify_master &quot;/etc/keepalived/notify_action.sh MASTER&quot; notify_backup &quot;/etc/keepalived/notify_action.sh BACKUP&quot; notify_fault &quot;/etc/keepalived/notify_action.sh FAULT&quot; notify_stop &quot;/etc/keepalived/notify_action.sh STOP&quot; garp_master_delay 1 garp_master_refresh 5 track_script &#123; check_haproxy //调用上面定义的脚本 &#125;&#125; 3.5 验证配置 杀掉主服务器上的haproxy程序，看看keepalived是否也紧跟着同时被杀掉了，虚ip被漂移到备用服务器上了 连接虚拟ip的6379端口以及3306端口，看能否正常转发到后端服务器上 访问haproxy管理页面：http://172.16.20.20:1080/admin (root/123456) 四、日志开启及切割 keepalivedi日志开启，存储到 /var/log/keepalived.log haproxy开启日志，存储到/var/log/haproxy/haproxy.log 每日0点切割日志压缩保存 4.1 开启keepalived日志 vim /etc/sysconfig/keepalived 1KEEPALIVED_OPTIONS=&quot;-D -S 0 -d&quot; vim /etc/rsyslog.conf 1local0.* /var/log/keepalived.log service rsyslog restart 4.1 开启Haproxy日志 vim /etc/rsyslog.conf 1234vim /etc/rsyslog.conf$ModLoad imudp$UDPServerRun 514local0.* /var/log/haproxy/haproxy.log vim /etc/rsyslog.conf 1local0.* /var/log/keepalived.log service rsyslog restart 4.3 切割Haproxy日志 如果不设定时间，切割默认是凌晨3点多执行 vim /etc/logrotate.d/logrotate_haproxy 1234567891011121314/var/log/haproxy/haproxy.log &#123; su root root daily missingok rotate 15 //默认我设置的是保留15天 compress notifempty create 644 root root dateext sharedscripts postrotate systemctl restart rsyslog endscript&#125; 测试切割：logrotate -d /etc/logrotate.d/logrotate_haproxy 强制执行切割：/usr/sbin/logrotate -f /etc/logrotate.d/logrotate_haproxy 五、额外补充5.1 Haproxy管理页面参数介绍1234567891011121314151617181920212223242526272829303132333435363738394041424344haproxy页面参数解释：页面详细参数解释QueueCur: current queued requests //当前的队列请求数量Max：max queued requests //最大的队列请求数量Limit： //队列限制数量Session rate(每秒的连接回话)列表：scur: current sessions //每秒的当前回话的限制数量smax: max sessions //每秒的新的最大的回话量slim: sessions limit //每秒的新回话的限制数量Sessions Total: //总共回话量Cur: //当前的回话Max: //最大回话 Limit: //回话限制Lbtot: total number of times a server was selected //选中一台服务器所用的总时间BytesIn： //网络的字节数输入总量 Out： //网络的字节数输出总量DeniedReq: denied requests//拒绝请求量Resp：denied responses //拒绝回应ErrorsReq：request errors //错误请求Conn：connection errors //错误的连接Resp: response errors (among which srv_abrt) ///错误的回应WarningsRetr: retries (warning) //重新尝试Redis：redispatches (warning) //再次发送Server列表：Status:状态，包括up(后端机活动)和down(后端机挂掉)两种状态LastChk: 持续检查后端服务器的时间Wght: (weight) : 权重Act: server is active (server), number of active servers (backend) //活动链接数量Bck: server is backup (server), number of backup servers (backend) //backup：备份的服务器数量Down： //后端服务器连接后都是down的数量Downtime: downtime: total downtime (in seconds) //总的downtime 时间Throttle: warm up status //设备变热状态 5.2 Haproxy配置文件参数介绍123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108haproxy 配置中分成五部分内容，分别如下：global： 设置全局配置参数，属于进程的配置，通常是和操作系统相关。defaults：配置默认参数，这些参数可以被用到frontend，backend，Listen组件；frontend：接收请求的前端虚拟节点，Frontend可以更加规则直接指定具体使用后端的backend；backend：后端服务集群的配置，是真实服务器，一个Backend对应一个或者多个实体服务器；Listen ：frontend和backend的组合体。————————————————版权声明：本文为CSDN博主「Resines」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/genglei1022/article/details/83374188global # 全局参数的设置 log 127.0.0.1 local0 info # log语法：log &lt;address_1&gt;[max_level_1] # 全局的日志配置，使用log关键字，指定使用127.0.0.1上的syslog服务中的local0日志设备，记录日志等级为info的日志 user haproxy group haproxy # 设置运行haproxy的用户和组，也可使用uid，gid关键字替代之 daemon # 以守护进程的方式运行 nbproc 16 # 设置haproxy启动时的进程数，根据官方文档的解释，我将其理解为：该值的设置应该和服务器的CPU核心数一致，即常见的2颗8核心CPU的服务器，即共有16核心，则可以将其值设置为：&lt;=16 ，创建多个进程数，可以减少每个进程的任务队列，但是过多的进程数也可能会导致进程的崩溃。这里我设置为16 maxconn 4096 # 定义每个haproxy进程的最大连接数 ，由于每个连接包括一个客户端和一个服务器端，所以单个进程的TCP会话最大数目将是该值的两倍。 #ulimit -n 65536 # 设置最大打开的文件描述符数，在1.4的官方文档中提示，该值会自动计算，所以不建议进行设置 pidfile /var/run/haproxy.pid # 定义haproxy的pid defaults # 默认部分的定义 mode http # mode语法：mode &#123;http|tcp|health&#125; 。http是七层模式，tcp是四层模式，health是健康检测，返回OK log 127.0.0.1 local3 err # 使用127.0.0.1上的syslog服务的local3设备记录错误信息 retries 3 # 定义连接后端服务器的失败重连次数，连接失败次数超过此值后将会将对应后端服务器标记为不可用 option httplog # 启用日志记录HTTP请求，默认haproxy日志记录是不记录HTTP请求的，只记录“时间[Jan 5 13:23:46] 日志服务器[127.0.0.1] 实例名已经pid[haproxy[25218]] 信息[Proxy http_80_in stopped.]”，日志格式很简单。 option redispatch # 当使用了cookie时，haproxy将会将其请求的后端服务器的serverID插入到cookie中，以保证会话的SESSION持久性；而此时，如果后端的服务器宕掉了，但是客户端的cookie是不会刷新的，如果设置此参数，将会将客户的请求强制定向到另外一个后端server上，以保证服务的正常。 option abortonclose # 当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接 option dontlognull # 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器或者监控系统为了探测该服务是否存活可用时，需要定期的连接或者获取某一固定的组件或页面，或者探测扫描端口是否在监听或开放等动作被称为空连接；官方文档中标注，如果该服务上游没有其他的负载均衡器的话，建议不要使用该参数，因为互联网上的恶意扫描或其他动作就不会被记录下来 option httpclose # 这个参数我是这样理解的：使用该参数，每处理完一个request时，haproxy都会去检查http头中的Connection的值，如果该值不是close，haproxy将会将其删除，如果该值为空将会添加为：Connection: close。使每个客户端和服务器端在完成一次传输后都会主动关闭TCP连接。与该参数类似的另外一个参数是“option forceclose”，该参数的作用是强制关闭对外的服务通道，因为有的服务器端收到Connection: close时，也不会自动关闭TCP连接，如果客户端也不关闭，连接就会一直处于打开，直到超时。 contimeout 5000 # 设置成功连接到一台服务器的最长等待时间，默认单位是毫秒，新版本的haproxy使用timeout connect替代，该参数向后兼容 clitimeout 3000 # 设置连接客户端发送数据时的成功连接最长等待时间，默认单位是毫秒，新版本haproxy使用timeout client替代。该参数向后兼容 srvtimeout 3000 # 设置服务器端回应客户度数据发送的最长等待时间，默认单位是毫秒，新版本haproxy使用timeout server替代。该参数向后兼容 listen status # 定义一个名为status的部分 bind 0.0.0.0:1080 # 定义监听的套接字 mode http # 定义为HTTP模式 log global # 继承global中log的定义 stats refresh 30s # stats是haproxy的一个统计页面的套接字，该参数设置统计页面的刷新间隔为30s stats uri /admin?stats # 设置统计页面的uri为/admin?stats stats realm Private lands # 设置统计页面认证时的提示内容 stats auth admin:password # 设置统计页面认证的用户和密码，如果要设置多个，另起一行写入即可 stats hide-version # 隐藏统计页面上的haproxy版本信息 frontend http_80_in # 定义一个名为http_80_in的前端部分 bind 0.0.0.0:80 # http_80_in定义前端部分监听的套接字 mode http # 定义为HTTP模式 log global # 继承global中log的定义 option forwardfor # 启用X-Forwarded-For，在requests头部插入客户端IP发送给后端的server，使后端server获取到客户端的真实IP acl static_down nbsrv(static_server) lt 1 # 定义一个名叫static_down的acl，当backend static_sever中存活机器数小于1时会被匹配到 acl php_web url_reg /*.php$ #acl php_web path_end .php # 定义一个名叫php_web的acl，当请求的url末尾是以.php结尾的，将会被匹配到，上面两种写法任选其一 acl static_web url_reg /*.(css|jpg|png|jpeg|js|gif)$ #acl static_web path_end .gif .png .jpg .css .js .jpeg # 定义一个名叫static_web的acl，当请求的url末尾是以.css、.jpg、.png、.jpeg、.js、.gif结尾的，将会被匹配到，上面两种写法任选其一 use_backend php_server if static_down # 如果满足策略static_down时，就将请求交予backend php_server use_backend php_server if php_web # 如果满足策略php_web时，就将请求交予backend php_server use_backend static_server if static_web # 如果满足策略static_web时，就将请求交予backend static_server backend php_server #定义一个名为php_server的后端部分 mode http # 设置为http模式 balance source # 设置haproxy的调度算法为源地址hash cookie SERVERID # 允许向cookie插入SERVERID，每台服务器的SERVERID可在下面使用cookie关键字定义 option httpchk GET /test/index.php # 开启对后端服务器的健康检测，通过GET /test/index.php来判断后端服务器的健康情况 server php_server_1 10.12.25.68:80 cookie 1 check inter 2000 rise 3 fall 3 weight 2 server php_server_2 10.12.25.72:80 cookie 2 check inter 2000 rise 3 fall 3 weight 1 server php_server_bak 10.12.25.79:80 cookie 3 check inter 1500 rise 3 fall 3 backup # server语法：server [:port] [param*] # 使用server关键字来设置后端服务器；为后端服务器所设置的内部名称[php_server_1]，该名称将会呈现在日志或警报中、后端服务器的IP地址，支持端口映射[10.12.25.68:80]、指定该服务器的SERVERID为1[cookie 1]、接受健康监测[check]、监测的间隔时长，单位毫秒[inter 2000]、监测正常多少次后被认为后端服务器是可用的[rise 3]、监测失败多少次后被认为后端服务器是不可用的[fall 3]、分发的权重[weight 2]、最后为备份用的后端服务器，当正常的服务器全部都宕机后，才会启用备份服务器[backup] backend static_server mode http option httpchk GET /test/index.html]]></content>
      <categories>
        <category>负载均衡</category>
      </categories>
      <tags>
        <tag>负载均衡</tag>
        <tag>haproxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tengine安装]]></title>
    <url>%2F2019%2F09%2F16%2Ftenine-install%2F</url>
    <content type="text"><![CDATA[一、前言 Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。 我个人很欣赏的一个功能，它有一个很好的dyups模块，可以动态上下线upstream中的后端机器，而不用重启服务 二、开始安装2.1 安装依赖1yum install gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel lua-devel GeoIP GeoIP-devel GeoIP-data systemd-devel -y 2.2 下载解压 从官网 http://tengine.taobao.org/下载tengine-2.2.3.tar.gz 解压到/root/目录下 1tar zxvf tengine-2.2.3.tar.gz 2.3 编译安装12cd tengine-2.2.3./configure --prefix=/usr/local/nginx --with-http_lua_module --with-http_dyups_module --with-http_dyups_lua_api --with-threads --with-http_v2_module --with-http_geoip_module --with-http_ssl_module --with-http_secure_link_module --add-module=/root/ngx_http_substitutions_filter_module --with-force-exit --with-http_realip_module 2.4 服务启动123ln -s /usr/local/nginx/sbin/nginx /sbin/nginxnginx -tnginx -s reload]]></content>
      <categories>
        <category>负载均衡</category>
      </categories>
      <tags>
        <tag>tengine</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tengine配置防百度爬虫]]></title>
    <url>%2F2019%2F09%2F03%2FAnti-reptile%2F</url>
    <content type="text"><![CDATA[发现此xxx.xxxx.cn一直被下面这个ua爬取: 1Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html) tengine配置if判断ua，挡掉这个爬虫 1.配置conf1234567891011vim xxx.xxxx.cn #添加以下配置 if ($http_user_agent ~ &quot;Mozilla/5.0\ \(compatible;\ Baiduspider/2.0;\ \+http://www.baidu.com/search/spider.html&quot;) &#123; return 403; &#125; if ($http_user_agent ~* ^Baiduspider) &#123; return 403; &#125; 2.测试nginx -t 和 nginx -s reload 3.额外补充方法：3.1 新建user-agent_deny.conf配置文件123456789101112131415#禁止Scrapy等工具的抓取if ($http_user_agent ~* (Scrapy|Curl|HttpClient)) &#123; return 403;&#125;#禁止指定UA及UA为空的访问if ($http_user_agent ~* &quot;FeedDemon|Indy Library|YandexBot|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms|^$&quot; ) &#123; return 403;&#125;#禁止非GET|HEAD|POST方式的抓取if ($request_method !~ ^(GET|HEAD|POST)$) &#123; return 403;&#125;#然后直接reload即可 3.2 添加default_server;12345server &#123; listen 81 default_server; server_name _; return 403; &#125; default_server：nginx的虚拟主机是通过HTTP请求中的Host值来找到对应的虚拟主机配置 对于未绑定的域名指向你的服务器时，匹配不到你配置的虚拟主机域名后，会默认使用这个虚拟主机，然后直接返回403（状态码，可以自己定义，且返回内容可以通过error_page、echo或是lua等等） 3.3 封阻UA 碰到爬虫，取出UA,比如： Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.3056.1748 Mobile Safari/537.36; Bytespider nginx配置匹配格式： 123if ($http_user_agent ~* Bytespider) &#123; return 403;&#125;]]></content>
      <categories>
        <category>负载均衡</category>
      </categories>
      <tags>
        <tag>tengine</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cisco switch配置管理]]></title>
    <url>%2F2019%2F07%2F25%2Fcisco-switch%2F</url>
    <content type="text"><![CDATA[一、准备1.1 准备工具 当拿到一台新的思科交换机，开始动手配置，目标实现远程登陆和管理 12硬件：笔记本、Console配置线、交换机Cisco3560一台软件：SecureCRT 1.2 连接交换机12345首先在“计算机”----“管理”----“设备管理器”中查看com口的编号(本例为com3口)然后打开SecureCRT软件，添加连接：协议：Serial端口：com3波特率：9600 成功连接之后开始进行配置 二、交换机配置管理2.1、配置登录用户、密码及SSH连接123456789101112131415161718Switch#configure terminal //进入配置模式Switch(config)# ip domain-name loverbook.com //在生成加密密码时需要用到用户名和域名Switch(config)#crypto key generate rsa //生成加密密钥The name for the keys will be: Switch.loverbook.comChoose the size of the key modulus in the range of 360 to 2048 for your General Purpose Keys. Choosing a key modulus greater than 512 may takea few minutes.How many bits in the modulus [512]: 1024 //生成一个rsa算法的密钥，密钥为1024位% Generating 1024 bit RSA keys, keys will be non-exportable...[OK]Switch(config)#line vty 0 15 //进入vty模式Switch(config-line)#transport input none //取消任何登录方式Switch(config-line)#transport input ssh //只允许ssh登录Switch(config-line)#exit //退出vtySwitch(config)#aaa new-mode //开启AAA认证Switch(config)#aaa authentication login default local //本地认证Switch(config)# username admin privilege 15 password admin //创建一个用户和密码Switch(config)#ip ssh version 2 //启用ssh版本号Switch#sh ip ssh //查看自己配置的sshSSH Enabled - version 2.0Authentication timeout: 120 secs; Authentication retries: 3 2.2 为交换机配置远程管理IP地址：123BOOK#conf tBOOK(config)#int vlan 1 //进入默认vlan 1（把交换机第一口划到vlan1中，连接上层设备）BOOK(config-if)#ip address 192.168.1.1 255.255.255.0 //配置管理地址，即可在客户端用新建的用户及密码SSH登录 2.3 配置交换机名字及enable用户模式密码1234Switch#configure terminal Switch(config)#hostname BOOK //配置交换机名称BOOK(config)#enable secret BOOK //配置用户模式密码Switch(config)#service password-encryption //对所有设置的密码进行加密，可以不配置 2.4 端口及vlan的配置管理 常用show int status查看端口状态:connected、disable、notconnect三种状态 创建和删除vlan （以实际办公网段为准） 1234BOOK#conf t BOOK(config)#vlan 12 //创建12网段BOOK(config-vlan)#no shutdown //默认创建好就是开启的，这步可以省略BOOK(config)# no vlan 12 //删除12网段 端口配置 123456BOOK#conf tBOOK(config)#int fa0/2 //进入端口2BOOK(config-if)#switchport mode access //把端口设置为access普通端口BOOK(config-if)#shutdown //端口关闭BOOK(config-if)#no shutdown //端口打开BOOK(config-if)#switchport access vlan 12 //把2端口加入12网段 2.5. 开启三层路由及静态路由配置 防火墙内网口地址：192.168.1.2 &amp; 交换机默认vlan1管理地址：192.168.1.1 12345678BOOK#conf tBOOK(config)#ip routing //开启三层路由，开启后所有网段互通BOOK(config)#no ip routing //关闭三层路由BOOK(config)#ip route 0.0.0.0 0.0.0.0 192.168.1.2 //指向上一层防火墙内网口地址备注：然后新加的12网段，需要在防火墙上添加一个返程路由即可Cisco防火墙配置路由BOOK-office# conf tBOOK-office(config)# route inside 192.168.12.0 255.255.255.0 192.168.1.1 三、实战演练3.1 新增部署网段的步骤12345678910111213141516BOOK#conf tBOOK(config)#vlan 13 //创建vlan 13BOOK(config-vlan)#exit //退出到配置模式BOOK(config)#int vlan 13 // 进入vlan 13BOOK(config-if)#ip address 192.168.13.1 255.255.255.0 //配置99网段的网关地址BOOK(config-if)#description bangong-vlan13 //可以对vlan13进行描述，方便后期管理BOOK(config-if)#exit //退出到配置模式BOOK(config)#ip dhcp pool 13 //创建99网段的地址池BOOK(dhcp-config)# network 192.168.13.0 255.255.255.0 //配置网段BOOK(dhcp-config)# default-router 192.168.13.1 //指定网段的网关BOOK(dhcp-config)# dns-server 8.8.8.8 202.96.209.5 //配置网段的主和辅DNSBOOK(dhcp-config)# lease 2 //IP地址的租约时间为2天，超过两天没用就会释放BOOK(config-if)#exit //退出到配置模式BOOK(config)#ip dhcp excluded-address 192.168.13.1 192.168.13.20 //排除掉的IP地址不分配BOOK(config)#int range fa0/2 -24 //对2到24端口全局配置BOOK(config-if-range)#switchport access vlan 13 //全部加入到13网段 3.2 IP和MAC地址绑定 需求：张三想把IP地址192.168.12.80和507b.9dbe.55ea绑定，让客户端只有连接上网络，就会分配这个IP地址，如果更改其它IP则无法上网 思路：首先 12网段的地址池已经有了，客户端如果想获取特定的ip地址，必须先把这个地址从12网段里排除掉，让这个地址不会分配，然后建立一个自己的99网段地址池 步骤如下： 1234567BOOK(config)#ip dhcp excluded-address 192.168.12.80 //先把这个IP地址排除不分配BOOK(config)#ip dhcp pool 12_zhangsan //建立一个张三自己的地址池，名字不能和已有的pool_12重复BOOK(dhcp-config)# host 192.168.12.80 255.255.255.0 //指定张三的ip地址BOOK(dhcp-config)# client-identifier 0150.7b9d.be55.ea // MAC地址格式为01xx.xxxx.xxxx.xxBOOK(dhcp-config)# dns-server 8.8.8.8 202.96.209.5 //指定DNSBOOK(dhcp-config)# default-router 192.168.12.1 // 指定网关BOOK(config)#arp 192.168.12.80 7b.9dbe.55ea ARPA //绑定生效 3.3 网段访问控制列表 需求：要求办公12网段和财务网段33隔离开，只允许特定的主机可以访问33网段，其它拒绝掉 123456789BOOK# conf tBOOK(config)#ip access-list extended 100 //做一个访问控制列表，编号100BOOK(config-ext-nacl)#permit ip host 192.168.12.80 any //允许张三这台机器可以访问任何网段BOOK(config-ext-nacl)#permit ip host 192.168.12.80 host 192.168.33.8 //允许张三访问88.8主机BOOK(config-ext-nacl)#deny ip any 192.168.22.0 0.0.0.255 //拒绝12网段访问33网段BOOK(config-ext-nacl)#permit ip any any //允许所有，这条必须加上，否则未放行的无法上网 BOOK(config-ext-nacl)#exit //退出到配置模式BOOK(config)#int vlan 12 //进入12网段下BOOK(config-if)#ip access-group 100 in //应用访问控制列表 3.4 常用基本维护命令123456789101112131415Show int status 查看端口状态Show run 查看配置Show ip dhcp pool 查看全部地址池的使用情况Show ip dhcp pool vlan 12 只查看12网段的地址池Show ip dhcp binding 查看租约信息Show ip dhcp conflict 查看地址冲突信息Show ip dhcp server statistics 查看DHCP收发数据包统计表Show ip arp 192.168.12.xx 根据ip地址追踪mac地址Show mac address-table address 7b.9dbe.55ea根据mac追踪具体端口位置如果出现网络地址受限，获取不到IP地址，看看是不是地址池满了，重新释放刷新地址池清除命令：Clear ip dhcp server statist 清除收发数据统计信息clear ip dhcp binding * 清除所有租约信息clear mac address-table dynamic 清除动态MAC地址列表clear arp-cache 清除arp缓存]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>思科交换机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cisco asa防火墙配置管理]]></title>
    <url>%2F2019%2F07%2F22%2Fcisco-asa%2F</url>
    <content type="text"><![CDATA[一、配置远程登录 关于怎么用console线连接防火墙,可以参考我上一篇交换机配置博客：https://www.loverbook.cn/2019/07/25/cisco-switch/ Cisco asa 版本8.3之前的命令和之后区别很大，此篇博客以新版本命令为参考，版本太旧建议升级ios 1.1 配置主机名及enable密码 12ciscoasa(config)# hostname BOOK-officeBOOK-office(config)# enable password xxxxxxx 1.2 配置远程SSH连接123456789101112BOOK-office(config)# crypto key generate rsa modulus 1024WARNING: You have a RSA keypair already defined named &lt;Default-RSA-Key&gt;.Do you really want to replace them? [yes/no]: y //输入y回车BOOK-office(config)# write memory //保存配置BOOK-office(config)# ssh 0.0.0.0 0.0.0.0 inside //允许内网任何ip可以连接BOOK-office(config)#ssh timeout 30 //设置超时时间,单位为分钟BOOK-office(config)# ssh version 2BOOK-office(config)# username admin password xxxxx //配置远程登录账户-------------相关命令--------------show ssh //参看SSH配置信息show crypto key mypubkey rsa //查看产生的rsa密钥值crypto key zeroize //清空所有产生的密钥 二、接口配置2.1 内外接口IP配置 外接口 Gi0/0：100.100.100.100(自己公网IP) 内接口 Gi0/1: 192.168.1.1 12345678910BOOK-office(config)# int gigabitEthernet 0/0 //把gi0/0配置成外接口BOOK-office(config-if)# no shutdown //开启端口 BOOK-office(config-if)# security-level 0 BOOK-office(config-if)# nameif outsideBOOK-office(config-if)# ip address 100.100.100.100 255.255.255.0 BOOK-office(config)# int gigabitEthernet 0/0 //把gi0/1配置成内接口BOOK-office(config-if)# no shutdown //开启端口 BOOK-office(config-if)# security-level 100 //流量只允许高往低走 BOOK-office(config-if)# nameif insideBOOK-office(config-if)# ip address 192.168.1.1 255.255.255.0 三、防火墙内外流量打通3.1 NAT转换 把内部局域网网段转换流量出去进行上网 123BOOK-office(config)#object network inside //定义一个地址对象inside 包含所有内网BOOK-office(config-network-object)# subnet 0.0.0.0 0.0.0.0 BOOK-office(config-network-object)# nat (inside,outside) dynamic interface //Nat 转换 3.2 访问控制列表123456----------定义一个 ip-mac的组，允许ip、imcp、tcp、udp协议通过---------BOOK-office(config)# access-list ip-mac extended permit ip any any BOOK-office(config)# access-list ip-mac extended permit imcp any anyBOOK-office(config)# access-list ip-mac extended permit tcp any anyBOOK-office(config)# access-list ip-mac extended permit udp any anyBOOK-office(config)# access-group ip-mac in interface inside //将这个组应用到内接口上 3.3 添加路由123BOOK-office(config)# route outside 0.0.0.0 0.0.0.0 100.100.100.99 1 //出口路由指向出口IP网关BOOK-office(config)# route inside 192.168.2.0 255.255.255.0 192.168.1.2 1 //内部路由指向下一层连接交换机IP BOOK-office(config)# route inside 192.168.12.0 255.255.255.0 192.168.1.2 1 //新增网段2和网段12返程路由 这样防火墙就可以实现内部局域网上网了，可以进行远程连接和上网测试了！！ 四、NAT端口映射4.1 端口映射 举例将内网一台测试服务器192.168.12.13的内网3389端口映射到外网的3389端口 123BOOK-office(config)#object network testserver //定义一个地址对象 testserverBOOK-office(config-network-object)# host 192.168.12.13BOOK-office(config-network-object)#nat (inside,outside) static interface service tcp 3389 3389 4.2 访问控制列表及策略应用1234-------定义控制列表100-------BOOK-office(config)#access-list 100 extended permit tcp any host 192.168.12.13 eq 3389-------将列表100应用到外接口上生效------BOOK-office(config)# access-group 100 in interface inside 五、宽带拨号（可选）5.1 宽带PPOE拨号 应用场景：没有固定IP地址，防火墙连接防火墙直接自身拨号，可以用此方法配置 123456789-------配置宽带账号和密码-------BOOK-office(config)# vpdn group ads1 request dialout pppoeBOOK-office(config)# vpdn group ads1 localname adxxxxx //此处填写宽带账户BOOK-office(config)# vpdn group ads1 ppp authentication papBOOK-office(config)# vpdn username adxxxxx password xxxxxxx //宽带账户和密码-------把拨号方式应用到外接口上，替代之前的固定IP地址-------BOOK-office(config)# int gigabitEthernet 0/0BOOK-office(config-if)# pppoe client vpdn group ads1BOOK-office(config-if)# ip address pppoe setroute]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>思科防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openvpn服务器搭建]]></title>
    <url>%2F2019%2F05%2F20%2FOpenvpnserver%2F</url>
    <content type="text"><![CDATA[一、前言 OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现，和传统 VPN 相比，它的优点是简单易用、安全稳定。此次基于centos7.3系统编译安装，使用udp协议自定义端口，搭建的目的是为了能实现通过证书+账户密码双重认证的方法，登录到阿里云VPC内部，对服务器进行配置管理。 准备工具 123Easy-rsa.zip //秘钥制作工具Lzo-2.0.6.tar.gz //依赖包Openvpn-2.3.3.tar.gz //安装包 网段 123openvpn主机ip : 172.xx.xx.xx外网ip: 100.100.100.100vpn网段：20.8.8.0 二、安装Openvpn2.1 安装依赖包 pam-devel是安装openvpn必要的依赖包 1[root@test ~]# yum -y install unzip ntpdate pam-devel openssl openssl-devel 2.2 上传包文件1234通过ssh连接上openvpn服务器，把3个文件拷贝到/usr/local/目录下，并分别解压[root@test local]# unzip easy-rsa.zip #asy-rsa证书制作工具[root@test local]# tar -zxvf lzo-2.06.tar.gz #lzo-2.0.6.tar.gz依赖包[root@test local]# tar -zxvf openvpn-2.3.3.tar.gz 2.3 创建安装目录123[root@test local]# mkdir -p /usr/local/openvpn/conf #于存放配置文件[root@test local]# mkdir –p /usr/local/openvpn/log #于存放日志文件[root@test local]# mkdir -p /usr/local/openvpn/easy-rsa #密钥生成工具及密钥 2.4 开始安装openvpn 进入/usr/local/目录下: 12345678910111213[root@test local]# cd lzo-2.06[root@test lzo-2.06]# ./configure --prefix=/usr #装依赖库[root@test lzo-2.06]#make &amp;&amp; make install[root@test lzo-2.06]# /sbin/ldconfig #置运行时动态链接库[root@test local]# cd openvpn-2.3.3[root@test openvpn-2.3.3]# ./configure --prefix=/usr/local/openvpn/[root@test openvpn-2.3.3]# make &amp;&amp; make install[root@testopenvpn-2.3.3]#cd sample/sample-config-files/[root@test sample-config-files]# cp server.conf /usr/local/openvpn/conf/ #贝配置文件[root@test local]# cd easy-rsa/2.0/[root@test 2.0]# cp -rf * /usr/local/openvpn/easy-rsa/[root@test 2.0]# cd /usr/local/openvpn/easy-rsa/[root@test easy-rsa]# chmod +x * 三、配置openvpn3.1 配置Vars文件及生成服务端证书12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182[root@test ~]# cd /usr/local/openvpn/easy-rsa/[root@test easy-rsa]# vim vars #配置vars文件（证书的默认配置）export KEY_SIZE=2048 #加密位数，太大增加CPU负载export CA_EXPIRE=3650 #证书有效期，这里是10年export KEY_EXPIRE=365 #秘钥有效期export KEY_COUNTRY=&quot;CN&quot; #国家export KEY_PROVINCE=&quot;SH&quot; #省份export KEY_CITY=&quot;Shanghai&quot; #所在城市export KEY_ORG=&quot;yunwei&quot; # 组织单位export KEY_EMAIL=&quot;yunwei@book.cn&quot; #邮箱地址export KEY_OU=&quot;Yunwei&quot; #组织容器可以随便填写export KEY_NAME=&quot;VPNServer&quot; #名称可以随便填写[root@test easy-rsa]# source vars #使配置生效下面开始制作根证书CA:[root@test easy-rsa]# ./clean-all #初始化[root@test easy-rsa]# ./build-ca #创建根证书，一路回车Generating a 2048 bit RSA private key..................................+++...............................+++writing new private key to &apos;ca.key&apos;-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &apos;.&apos;, the field will be left blank.-----Country Name (2 letter code) [CN]: State or Province Name (full name) [SH]: Locality Name (eg, city) [Shanghai]: Organization Name (eg, company) [yunwei]: Organizational Unit Name (eg, section) [Yunwei]: Common Name (eg, your name or your server&apos;s hostname) [yunwei CA]: Name [EasyServer]: Email Address [yunwei@book.cn]: 创建服务器端证书server和秘钥:[root@test easy-rsa]# ./build-key-server server #一路回车默认，最后输入y确认Generating a 2048 bit RSA private key...........+++....+++writing new private key to &apos;server.key&apos;-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &apos;.&apos;, the field will be left blank.-----Country Name (2 letter code) [CN]:State or Province Name (full name) [SH]:Locality Name (eg, city) [Shanghai]:Organization Name (eg, company) [yunwei]:Organizational Unit Name (eg, section) [Yunwei]:Common Name (eg, your name or your server&apos;s hostname) [server]:Name [EasyServer]:Email Address [yunwei@book.cn]:Please enter the following &apos;extra&apos; attributesto be sent with your certificate requestA challenge password []:An optional company name []:Using configuration from /usr/local/openvpn/easy-rsa/openssl-1.0.0.cnfCheck that the request matches the signatureSignature okThe Subject&apos;s Distinguished Name is as followscountryName :PRINTABLE:&apos;CN&apos;stateOrProvinceName :PRINTABLE:&apos;SH&apos;localityName :PRINTABLE:&apos;Shanghai&apos;organizationName :PRINTABLE:&apos;yunwei&apos;organizationalUnitName:PRINTABLE:&apos;Yunwei&apos;commonName :PRINTABLE:&apos;server&apos;name :PRINTABLE:&apos;EasyServer&apos;emailAddress :IA5STRING:&apos;yunwei@book.cn&apos;Certificate is to be certified until Apr 15 15:35:32 2019 GMT (365 days)Sign the certificate? [y/n]:y #输入y1 out of 1 certificate requests certified, commit? [y/n] y #输入yWrite out database with 1 new entries[root@test easy-rsa]# ./build-dh #创建dh2048加密协商文件[root@test easy-rsa]# [root@testeasy-rsa]#../sbin/openvpn --genkey --secret /usr/local/openvpn/easy-rsa/keys/ta.key #生成防Dos攻击的文件 3.2 配置openvpn server文件12345678910111213141516171819202122232425262728293031[root@test ~]# vim /usr/local/openvpn/conf/server.confLocal 172.xx.xx.xx #本机监听地址port 2294 #自定义端口号proto udp #使用udp协议dev tun #tun是ip层的点对点协议,建议使用tun#证书若没放在conf下，需要指定路径ca /usr/local/openvpn/easy-rsa/keys/ca.crt cert /usr/local/openvpn/easy-rsa/keys/server.crtkey /usr/local/openvpn/easy-rsa/keys/server.key # This file should be kept secretdh /usr/local/openvpn/easy-rsa/keys/dh2048.pemserver 20.8.8.0 255.255.255.0 #服务器vpn网段地址#防止openvpn重新启动后“忘记”Client曾经使用过的IP地址ifconfig-pool-persist /usr/local/openvpn/log/ipp.txt #通过VPN Server往Client push路由，client通过pull指令获得 push &quot;route 20.8.8.0 255.255.255.0&quot;push &quot;route 172.xx.xx.0 255.255.255.0&quot;push &quot;dhcp-option DNS 223.5.5.5&quot; #指定DNS地址push &quot;dhcp-option DNS 8.8.8.8&quot;client-to-client#和keys连接VPN，一定要打开这个选项，否则只允许一个人连接VPNduplicate-cnkeepalive 10 120 comp-lzo #对数据进行压缩max-clients 10 #支持客户端数通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keyspersist-key#通过keepalive检测超时后，重新启动VPN，一直保持tun或者tap设备是linkup的，否则网络连接会先linkdown然后linkuppersist-tun status /usr/local/openvpn/log/openvpn-status.log #日志路径log-append /usr/local/openvpn/log/openvpn.logverb 3 四、用户密码+证书验证配置4.1 创建客户端用户12[root@test ~]# cd /usr/local/openvpn/easy-rsa/[root@test easy-rsa]# ./build-key book #创建用户book，方法同server端 1备注：执行后会在keys文件夹下，生成3个文件，book.crt、book.csr（mac电脑不需要这个文件）、book.key，另外加上同目录下的ca.crt、ca.key、ta.key和dh2048.pem这7个文件一起打包，即是客户端所需要的所有文件，添加其它用户也是同样的方法 4.2 配置账户密码验证1234567[root@test ~]# vi /usr/local/openvpn/conf/server.conf #配置文件中加上以下几行tls-auth /usr/local/openvpn/easy-rsa/keys/ta.key 0 #server端是0 ,客户端为1auth-user-pass-verify /usr/local/openvpn/easy-rsa/checkpsw.sh via-env #密码验证的脚本文件放在此目录下，稍后创建脚本script-security 3username-as-common-name ;client-cert-not-required #如果只想账户密码验证，就开启这句 12345678910111213141516171819202122232425262728创建脚本文件：checkpsw.sh#!/bin/sh############################################################ checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt;## This script will authenticate OpenVPN users against# a plain text file. The passfile should simply contain# one row per user with the username first followed by# one or more space(s) or tab(s) and then the password.PASSFILE=&quot;/usr/local/openvpn/easy-rsa/psw-file&quot; //指定保存账户和密码的文件LOG_FILE=&quot;/usr/local/openvpn/log/openvpn-password.log&quot;//保存日志文件TIME_STAMP=`date &quot;+%Y-%m-%d %T&quot;`###########################################################if [ ! -r &quot;$&#123;PASSFILE&#125;&quot; ]; thenecho &quot;$&#123;TIME_STAMP&#125;: Could not open password file \&quot;$&#123;PASSFILE&#125;\&quot; for reading.&quot; &gt;&gt; $&#123;LOG_FILE&#125;exit 1fiCORRECT_PASSWORD=`awk &apos;!/^;/&amp;&amp;!/^#/&amp;&amp;$1==&quot;&apos;$&#123;username&#125;&apos;&quot;&#123;print $2;exit&#125;&apos; $&#123;PASSFILE&#125;`if [ &quot;$&#123;CORRECT_PASSWORD&#125;&quot; = &quot;&quot; ]; thenecho &quot;$&#123;TIME_STAMP&#125;: User does not exist: username=\&quot;$&#123;username&#125;\&quot;, password=\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;exit 1fiif [ &quot;$&#123;password&#125;&quot; = &quot;$&#123;CORRECT_PASSWORD&#125;&quot; ]; thenecho &quot;$&#123;TIME_STAMP&#125;: Successful authentication: username=\&quot;$&#123;username&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;exit 0fiecho &quot;$&#123;TIME_STAMP&#125;: Incorrect password: username=\&quot;$&#123;username&#125;\&quot;, password=\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;exit 1 123创建保存账户密码的文件： psw-file[root@test easy-rsa]#vi psw-filebook 123456 //账户+空格+密码格式保存 4.3 注销用户客户端 如果同事离职了，需要注销证书 1234[root@test easy-rsa]# ./revoke-full book //注销用户book这个时候还是可以利用此证书登录服务器的，在server.conf下增加一行crl-verify /usr/local/openvpn/easy-rsa/keys/crl.pem再重启下openvpn服务即可 4.4 启动openvpn12345[root@test~]# /usr/local/openvpn/sbin/openvpn --config /usr/local/openvpn/conf/server.conf &amp;[root@test~]#ps –ef |grep openvpnroot 1013 1 0 Apr13 ? 00:00:04 /usr/local/openvpn/sbin/openvpn --config /usr/local/openvpn/conf/server.conf [root@test~]# netstat -ntlup //由此可见端口已在监听Udp 0 0 172.xx.xx.xx:2294 0.0.0.0:* 1013/openvpn 五、配置防火墙5.1 开启路由转发123[root@test ~]# vim /etc/sysctl.confnet.ipv4.ip_forward = 1 #将值改为1保存[root@test ~]# sysctl -p #执行生效 5.2 配置iptables NAT转发12345678910111213141516171819[root@test ~]# systemctl stop firewalld.service[root@test ~]# systemctl disable firewalld.service[root@test ~]# yum install -y iptables-services[root@test ~]# systemctl enable iptables[root@test ~]# iptables -F #清空iptables配置规则[root@test ~]# iptables -X[root@test ~]# iptables -P OUTPUT ACCEPT [root@test ~]# iptables -P FORWARD ACCEPT[root@test ~]# iptables -A INPUT -i lo -j ACCEPT [root@test ~]# iptables -A OUTPUT -o lo -j ACCEPT[root@test ~]#iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT[root@test ~]# iptables -A INPUT -p tcp --dport 22 -j ACCEPT[root@test ~]# iptables -A INPUT -p udp --dport 2294 -j ACCEPT #对vpn网段进行转发[root@test ~]# iptables -t nat -A POSTROUTING -o eth0 -s 20.8.8.0/24 -j MASQUERADE#把内部主机端口的流量指定到出口ip[root@test ~]# iptables -t nat -A PREROUTING -s 100.100.100.100 -p udp -m udp --dport 2294 -j DNAT --to-destination 172.xx.xx.xx:2294 [root@test ~]#service iptables save[root@test ~]#service iptables restart 六、客户端配置文件 打开client.ovpn配置文件 12345678910111213141516Clientdev tunproto udpremote 100.100.100.100 2294resolv-retry infinitenobindpersist-keypersist-tunca ca.crtcert book.crt #这里是指定用户证书，名字要和拷贝过来的文件一致key book.keyns-cert-type servercomp-lzoverb 3tls-auth ta.key 1 #这里客户端为1auth-user-pass #这里要加上，用户密码验证]]></content>
      <categories>
        <category>linux 运维</category>
      </categories>
      <tags>
        <tag>VPN</tag>
        <tag>linux 运维</tag>
      </tags>
  </entry>
</search>
