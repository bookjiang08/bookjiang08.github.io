<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Tengine配置防百度爬虫]]></title>
    <url>%2F2019%2F09%2F03%2FAnti-reptile%2F</url>
    <content type="text"><![CDATA[发现此xxx.xxxx.cn一直被下面这个ua爬取:Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html) tengine配置if判断ua，挡掉这个爬虫 1.配置confvim xxx.xxxx.cn #添加以下配置 if ($http_user_agent ~ &quot;Mozilla/5.0\ \(compatible;\ Baiduspider/2.0;\ \+http://www.baidu.com/search/spider.html&quot;) { return 403; } if ($http_user_agent ~* ^Baiduspider) { return 403; } 2.测试nginx -t 和 nginx -s reload 3.额外补充方法：3.1 新建user-agent_deny.conf配置文件#禁止Scrapy等工具的抓取 if ($http_user_agent ~* (Scrapy|Curl|HttpClient)) { return 403; } #禁止指定UA及UA为空的访问 if ($http_user_agent ~* &quot;FeedDemon|Indy Library|YandexBot|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms|^$&quot; ) { return 403; } #禁止非GET|HEAD|POST方式的抓取 if ($request_method !~ ^(GET|HEAD|POST)$) { return 403; } #然后直接reload即可 3.2 添加default_server; server { listen 81 default_server; server_name _; return 403; } default_server：nginx的虚拟主机是通过HTTP请求中的Host值来找到对应的虚拟主机配置 对于未绑定的域名指向你的服务器时，匹配不到你配置的虚拟主机域名后，会默认使用这个虚拟主机，然后直接返回403（状态码，可以自己定义，且返回内容可以通过error_page、echo或是lua等等）]]></content>
      <categories>
        <category>tengine</category>
      </categories>
      <tags>
        <tag>tengine</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Read me]]></title>
    <url>%2F2019%2F09%2F02%2FREADME%2F</url>
    <content type="text"><![CDATA[LB相关文档及操作 禅道申请LB域名配置模板地址：https://chandao.tuhu.work/index.php?m=task&amp;f=create&amp;project=630&amp;storyID=17205&amp;moduleID=4131]]></content>
      <categories>
        <category>book</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2019%2F08%2F22%2Ftest%2F</url>
    <content type="text"><![CDATA[this is test page.]]></content>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Openvpn服务器搭建]]></title>
    <url>%2F2019%2F05%2F20%2FOpenvpnserver%2F</url>
    <content type="text"><![CDATA[一、前期准备1.1 概述OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现，和传统 VPN 相比，它的优点是简单易用、安全稳定。此次基于centos7.3系统编译安装，使用udp协议自定义端口，搭建的目的是为了能实现通过证书+账户密码双重认证的方法，登录到阿里云VPC内部，对服务器进行配置管理。 1.2 准备工具文件Easy-rsa.zip //秘钥制作工具 Lzo-2.0.6.tar.gz //依赖包 Openvpn-2.3.3.tar.gz //安装包 二、安装Openvpn2.1 安装依赖包pam-devel是安装openvpn必要的依赖包 [root@test ~]# yum -y install unzip ntpdate pam-devel openssl openssl-devel 2.2 上传包文件通过ssh连接上openvpn服务器，把3个文件拷贝到/usr/local/目录下，并分别解压 [root@test local]# unzip easy-rsa.zip #asy-rsa证书制作工具 [root@test local]# tar -zxvf lzo-2.06.tar.gz #lzo-2.0.6.tar.gz依赖包 [root@test local]# tar -zxvf openvpn-2.3.3.tar.gz 2.3 创建安装目录[root@test local]# mkdir -p /usr/local/openvpn/conf #于存放配置文件 [root@test local]# mkdir –p /usr/local/openvpn/log #于存放日志文件 [root@test local]# mkdir -p /usr/local/openvpn/easy-rsa #密钥生成工具及密钥 2.4 开始安装openvpn进入/usr/local/目录下: [root@test local]# cd lzo-2.06 [root@test lzo-2.06]# ./configure --prefix=/usr #装依赖库 [root@test lzo-2.06]#make &amp;&amp; make install [root@test lzo-2.06]# /sbin/ldconfig #置运行时动态链接库 [root@test local]# cd openvpn-2.3.3 [root@test openvpn-2.3.3]# ./configure --prefix=/usr/local/openvpn/ [root@test openvpn-2.3.3]# make &amp;&amp; make install [root@testopenvpn-2.3.3]#cd sample/sample-config-files/ [root@test sample-config-files]# cp server.conf /usr/local/openvpn/conf/ #贝配置文件 [root@test local]# cd easy-rsa/2.0/ [root@test 2.0]# cp -rf * /usr/local/openvpn/easy-rsa/ [root@test 2.0]# cd /usr/local/openvpn/easy-rsa/ [root@test easy-rsa]# chmod +x * 三、配置openvpn3.1 配置Vars文件及生成服务端证书[root@test ~]# cd /usr/local/openvpn/easy-rsa/ [root@test easy-rsa]# vim vars #配置vars文件（证书的默认配置） export KEY_SIZE=2048 #加密位数，太大增加CPU负载 export CA_EXPIRE=3650 #证书有效期，这里是10年 export KEY_EXPIRE=365 #秘钥有效期 export KEY_COUNTRY=&quot;CN&quot; #国家 export KEY_PROVINCE=&quot;SH&quot; #省份 export KEY_CITY=&quot;Shanghai&quot; #所在城市 export KEY_ORG=&quot;yunwei&quot; # 组织单位 export KEY_EMAIL=&quot;yunwei@book.cn&quot; #邮箱地址 export KEY_OU=&quot;Yunwei&quot; #组织容器可以随便填写 export KEY_NAME=&quot;VPNServer&quot; #名称可以随便填写 [root@test easy-rsa]# source vars #使配置生效 下面开始制作根证书CA: [root@test easy-rsa]# ./clean-all #初始化 [root@test easy-rsa]# ./build-ca #创建根证书，一路回车 Generating a 2048 bit RSA private key ..................................+++ ...............................+++ writing new private key to &#39;ca.key&#39; ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter &#39;.&#39;, the field will be left blank. ----- Country Name (2 letter code) [CN]: State or Province Name (full name) [SH]: Locality Name (eg, city) [Shanghai]: Organization Name (eg, company) [yunwei]: Organizational Unit Name (eg, section) [Yunwei]: Common Name (eg, your name or your server&#39;s hostname) [yunwei CA]: Name [EasyServer]: Email Address [yunwei@book.cn]: 创建服务器端证书server和秘钥: [root@test easy-rsa]# ./build-key-server server #一路回车默认，最后输入y确认 Generating a 2048 bit RSA private key ...........+++ ....+++ writing new private key to &#39;server.key&#39; ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter &#39;.&#39;, the field will be left blank. ----- Country Name (2 letter code) [CN]: State or Province Name (full name) [SH]: Locality Name (eg, city) [Shanghai]: Organization Name (eg, company) [yunwei]: Organizational Unit Name (eg, section) [Yunwei]: Common Name (eg, your name or your server&#39;s hostname) [server]: Name [EasyServer]: Email Address [yunwei@book.cn]: Please enter the following &#39;extra&#39; attributes to be sent with your certificate request A challenge password []: An optional company name []: Using configuration from /usr/local/openvpn/easy-rsa/openssl-1.0.0.cnf Check that the request matches the signature Signature ok The Subject&#39;s Distinguished Name is as follows countryName :PRINTABLE:&#39;CN&#39; stateOrProvinceName :PRINTABLE:&#39;SH&#39; localityName :PRINTABLE:&#39;Shanghai&#39; organizationName :PRINTABLE:&#39;yunwei&#39; organizationalUnitName:PRINTABLE:&#39;Yunwei&#39; commonName :PRINTABLE:&#39;server&#39; name :PRINTABLE:&#39;EasyServer&#39; emailAddress :IA5STRING:&#39;yunwei@book.cn&#39; Certificate is to be certified until Apr 15 15:35:32 2019 GMT (365 days) Sign the certificate? [y/n]:y #输入y 1 out of 1 certificate requests certified, commit? [y/n] y #输入y Write out database with 1 new entries [root@test easy-rsa]# ./build-dh #创建dh2048加密协商文件 [root@test easy-rsa]# [root@testeasy-rsa]#../sbin/openvpn --genkey --secret /usr/local/openvpn/easy-rsa/keys/ta.key #生成防Dos攻击的文件 3.2 配置openvpn server文件[root@test ~]# vim /usr/local/openvpn/conf/server.conf Local 172.xx.xx.xx #本机监听地址 port 2294 #自定义端口号 proto udp #使用udp协议 dev tun #tun是ip层的点对点协议,建议使用tun #证书若没放在conf下，需要指定路径 ca /usr/local/openvpn/easy-rsa/keys/ca.crt cert /usr/local/openvpn/easy-rsa/keys/server.crt key /usr/local/openvpn/easy-rsa/keys/server.key # This file should be kept secret dh /usr/local/openvpn/easy-rsa/keys/dh2048.pem server 20.8.8.0 255.255.255.0 #服务器vpn网段地址 #防止openvpn重新启动后“忘记”Client曾经使用过的IP地址 ifconfig-pool-persist /usr/local/openvpn/log/ipp.txt #通过VPN Server往Client push路由，client通过pull指令获得 push &quot;route 20.8.8.0 255.255.255.0&quot; push &quot;route 172.xx.xx.0 255.255.255.0&quot; push &quot;dhcp-option DNS 223.5.5.5&quot; #指定DNS地址 push &quot;dhcp-option DNS 8.8.8.8&quot; client-to-client #和keys连接VPN，一定要打开这个选项，否则只允许一个人连接VPN duplicate-cn keepalive 10 120 comp-lzo #对数据进行压缩 max-clients 10 #支持客户端数 通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys persist-key #通过keepalive检测超时后，重新启动VPN，一直保持tun或者tap设备是linkup的，否则网络连接会先linkdown然后linkup persist-tun status /usr/local/openvpn/log/openvpn-status.log #日志路径 log-append /usr/local/openvpn/log/openvpn.log verb 3 四、用户密码+证书验证配置4.1 创建客户端用户[root@test ~]# cd /usr/local/openvpn/easy-rsa/ [root@test easy-rsa]# ./build-key book #创建用户book，方法同server端备注：执行后会在keys文件夹下，生成3个文件，book.crt、book.csr（mac电脑不需要这个文件）、book.key，另外加上同目录下的ca.crt、ca.key、ta.key和dh2048.pem这7个文件一起打包，即是客户端所需要的所有文件，添加其它用户也是同样的方法 4.2 配置账户密码验证[root@test ~]# vi /usr/local/openvpn/conf/server.conf #配置文件中加上以下几行 tls-auth /usr/local/openvpn/easy-rsa/keys/ta.key 0 #server端是0 ,客户端为1 auth-user-pass-verify /usr/local/openvpn/easy-rsa/checkpsw.sh via-env #密码验证的脚本文件放在此目录下，稍后创建脚本 script-security 3 username-as-common-name ;client-cert-not-required #如果只想账户密码验证，就开启这句创建脚本文件：checkpsw.sh #!/bin/sh ########################################################### # checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt; # # This script will authenticate OpenVPN users against # a plain text file. The passfile should simply contain # one row per user with the username first followed by # one or more space(s) or tab(s) and then the password. PASSFILE=&quot;/usr/local/openvpn/easy-rsa/psw-file&quot; //指定保存账户和密码的文件 LOG_FILE=&quot;/usr/local/openvpn/log/openvpn-password.log&quot;//保存日志文件 TIME_STAMP=`date &quot;+%Y-%m-%d %T&quot;` ########################################################### if [ ! -r &quot;${PASSFILE}&quot; ]; then echo &quot;${TIME_STAMP}: Could not open password file \&quot;${PASSFILE}\&quot; for reading.&quot; &gt;&gt; ${LOG_FILE} exit 1 fi CORRECT_PASSWORD=`awk &#39;!/^;/&amp;&amp;!/^#/&amp;&amp;$1==&quot;&#39;${username}&#39;&quot;{print $2;exit}&#39; ${PASSFILE}` if [ &quot;${CORRECT_PASSWORD}&quot; = &quot;&quot; ]; then echo &quot;${TIME_STAMP}: User does not exist: username=\&quot;${username}\&quot;, password=\&quot;${password}\&quot;.&quot; &gt;&gt; ${LOG_FILE} exit 1 fi if [ &quot;${password}&quot; = &quot;${CORRECT_PASSWORD}&quot; ]; then echo &quot;${TIME_STAMP}: Successful authentication: username=\&quot;${username}\&quot;.&quot; &gt;&gt; ${LOG_FILE} exit 0 fi echo &quot;${TIME_STAMP}: Incorrect password: username=\&quot;${username}\&quot;, password=\&quot;${password}\&quot;.&quot; &gt;&gt; ${LOG_FILE} exit 1创建保存账户密码的文件： psw-file [root@test easy-rsa]#vi psw-file book 123456 //账户+空格+密码格式保存 4.3 注销用户客户端如果同事离职了，需要注销证书 [root@test easy-rsa]# ./revoke-full book //注销用户book 这个时候还是可以利用此证书登录服务器的，在server.conf下增加一行 crl-verify /usr/local/openvpn/easy-rsa/keys/crl.pem 再重启下openvpn服务即可 4.4 启动openvpn[root@test~]# /usr/local/openvpn/sbin/openvpn --config /usr/local/openvpn/conf/server.conf &amp; [root@test~]#ps –ef |grep openvpn root 1013 1 0 Apr13 ? 00:00:04 /usr/local/openvpn/sbin/openvpn --config /usr/local/openvpn/conf/server.conf [root@test~]# netstat -ntlup //由此可见端口已在监听 Udp 0 0 172.16.10.12:2294 0.0.0.0:* 1013/openvpn 五、配置防火墙5.1 开启路由转发[root@test ~]# vim /etc/sysctl.conf net.ipv4.ip_forward = 1 #将值改为1保存 [root@test ~]# sysctl -p #执行生效 5.2 配置iptables NAT转发[root@test ~]# systemctl stop firewalld.service [root@test ~]# systemctl disable firewalld.service [root@test ~]# yum install -y iptables-services [root@test ~]# systemctl enable iptables [root@test ~]# iptables -F #清空iptables配置规则 [root@test ~]# iptables -X [root@test ~]# iptables -P OUTPUT ACCEPT [root@test ~]# iptables -P FORWARD ACCEPT [root@test ~]# iptables -A INPUT -i lo -j ACCEPT [root@test ~]# iptables -A OUTPUT -o lo -j ACCEPT [root@test ~]#iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT [root@test ~]# iptables -A INPUT -p tcp --dport 22 -j ACCEPT [root@test ~]# iptables -A INPUT -p udp --dport 2294 -j ACCEPT #对vpn网段进行转发 [root@test ~]# iptables -t nat -A POSTROUTING -o eth0 -s 20.8.8.0/24 -j MASQUERADE #把内部主机端口的流量指定到出口ip [root@test ~]# iptables -t nat -A PREROUTING -s 100.100.100.100 -p udp -m udp --dport 2294 -j DNAT --to-destination 172.xx.xx.xx:2294 [root@test ~]#service iptables save [root@test ~]#service iptables restart]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
</search>
